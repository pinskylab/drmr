[{"path":"https://pinskylab.github.io/drmr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://pinskylab.github.io/drmr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://pinskylab.github.io/drmr/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://pinskylab.github.io/drmr/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://pinskylab.github.io/drmr/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://pinskylab.github.io/drmr/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://pinskylab.github.io/drmr/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://pinskylab.github.io/drmr/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://pinskylab.github.io/drmr/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://pinskylab.github.io/drmr/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://pinskylab.github.io/drmr/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://pinskylab.github.io/drmr/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://pinskylab.github.io/drmr/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://pinskylab.github.io/drmr/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://pinskylab.github.io/drmr/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://pinskylab.github.io/drmr/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://pinskylab.github.io/drmr/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://pinskylab.github.io/drmr/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://pinskylab.github.io/drmr/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://pinskylab.github.io/drmr/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://pinskylab.github.io/drmr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://pinskylab.github.io/drmr/articles/examples.html","id":"tl-dr","dir":"Articles","previous_headings":"","what":"TL; DR","title":"Examples","text":"document demonstrates functionalities drmr R package fitting Dynamic Range Species Distribution Models (DRMs SDMs, respectively) using pre-compiled Stan models. ’ll explore increasingly complex models, showcasing package’s capabilities help five additional R packages: sf: spatial data manipulation visualization ggplot2: creating graphs bayesplot: visualizing MCMC outputs dplyr: data wrangling","code":""},{"path":"https://pinskylab.github.io/drmr/articles/examples.html","id":"sec-drmr","dir":"Articles","previous_headings":"","what":"Installing the drmr package","title":"Examples","text":"drmr package provides pre-compiled cmdstanr (Gabry et al. 2024) models powered instantiate package (Landau 2024). pre-compiled models allow us make inferences DRM (SDM) using cmdstan algorithms, HMC NUTS Sampler. package CRAN yet. install version hosted GitHub, run: Finally, code loads packages necessary reproduce examples document.","code":"remotes::install_github(\"pinskylab/drmr\") library(drmr) library(sf) ## \"mapping\" Linking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.4.0; sf_use_s2() is TRUE library(ggplot2) ## graphs library(bayesplot) ## and more graphs This is bayesplot version 1.13.0 - Online documentation and vignettes at mc-stan.org/bayesplot - bayesplot theme set to bayesplot::theme_default() * Does _not_ affect other ggplot2 plots * See ?bayesplot_theme_set for details on theme setting library(dplyr) Attaching package: 'dplyr' The following object is masked from 'package:drmr':      between The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union"},{"path":"https://pinskylab.github.io/drmr/articles/examples.html","id":"sec-data","dir":"Articles","previous_headings":"","what":"Data","title":"Examples","text":"example, ’ll use package’s built-Summer flounder dataset, resembles data analyzed Fredston et al. (2025). load running: quick exploration data reveals following: Surface salinity (ssalin) bottom salinity (bsalin) missing values (around 30% missing ). least 25% density (dens) values zero. Finally, split data, reserving last five years evaluating predictions: fitting models explanatory variables, ’s good practice standardize centering (subtracting mean) scaling (dividing standard deviation). transformation zero mean unit variance offers two main benefits: typically improves efficiency Monte Carlo Markov Chain (MCMC) sampling, makes comparing magnitude regression coefficients easier assessing relative variable importance. applications involving forecasting prediction, crucial calculate mean standard deviation standardization using training dataset. exact values must applied standardize test dataset (future data), simulating real-world scenario information future observations unavailable model fitting. spirit, center scale potential explanatory variables follows: extensive list explanatory variables available dataset, run: ?sum_fl.","code":"## loads the data data(sum_fl)  ## computing density sum_fl <- sum_fl |>   mutate(dens = 100 * y / area_km2,          .before = y) ## 5 years-ahead predictions first_year_forecast <- max(sum_fl$year) - 4  first_id_forecast <-   first_year_forecast - min(sum_fl$year) + 1  years_all <- order(unique(sum_fl$year)) years_train <- years_all[years_all < first_id_forecast] years_test <- years_all[years_all >= first_id_forecast]  ## splitting data dat_test <- sum_fl |>   filter(year >= first_year_forecast)  dat_train <- sum_fl |>   filter(year < first_year_forecast) avgs <- c(\"stemp\" = mean(dat_train$stemp),           \"btemp\" = mean(dat_train$btemp),           \"depth\" = mean(dat_train$depth),           \"n_hauls\" = mean(dat_train$n_hauls),           \"lat\" = mean(dat_train$lat),           \"lon\" = mean(dat_train$lon))  min_year <- dat_train$year |>   min()  ## centering covariates dat_train <- dat_train |>   mutate(c_stemp = stemp - avgs[\"stemp\"],          c_btemp = btemp - avgs[\"btemp\"],          c_hauls = n_hauls - avgs[\"n_hauls\"],          c_lat   = lat - avgs[\"lat\"],          c_lon   = lon - avgs[\"lon\"],          time  = year - min_year)  dat_test <- dat_test |>   mutate(c_stemp = stemp - avgs[\"stemp\"],          c_btemp = btemp - avgs[\"btemp\"],          c_hauls = n_hauls - avgs[\"n_hauls\"],          c_lat   = lat - avgs[\"lat\"],          c_lon   = lon - avgs[\"lon\"],          time  = year - min_year)"},{"path":"https://pinskylab.github.io/drmr/articles/examples.html","id":"fitting-and-comparing-models","dir":"Articles","previous_headings":"","what":"Fitting and comparing models","title":"Examples","text":"Let’s begin fitting simplest DRM available, call baseline. default, simplest fit_drm call assumes two age-groups survival rate 0.70 age-classes. function many arguments. need input least following: .data - data.frame; y_col - character indicating name column (variable) storing response variable .data. time_col - character indicating name column (variable) storing time variable .data. site_col - character indicating name column (variable) storing site variable .data. seed - integer corresponding seed random number generation. parameter helps ensure reproducibility. Moreover, output fit_drm call results named list. important element stanfit, equivalent output https://mc-stan.org/cmdstanr/reference/model-method-sample.html. remaining additional elements useful calculating predictions. interesting expected density probabilities absence varying according environmental variables. achieve , input formulas formula_zero formula_rec arguments. specific call fit_drm follows: call also introduce init argument. argument controls MCMC algorithm initialized. three different initialization options: \"cmdstan_default\": default initialization method cmdstan. \"prior\": Initializes parameters samples prior distributions. \"pathfinder\": Uses Pathfinder algorithm (Zhang et al. 2022) initialization. info, see ?fit_drm. can easily fit several models specific dataset, exploring different features increasing levels complexity. simplest model baseline. Building upon , drm_1 introduced specific covariate effects, modeling recruitment quadratic function Sea Surface Temperature (SST) probability absence dependent number hauls, SST, Sea Bottom Temperature (SBT). code chunk , model drm_2 adds estimation constant survival rate features drm_1. Subsequently, drm_3 incorporated AR(1) temporal autocorrelation process recruitment based drm_2. Several variations built upon drm_3. Model drm_4 introduces spatial movement dynamics increased number age classes six. contrast, drm_5 also increases age classes six include movement. Model drm_6 adds age-specific fishing mortality rates 16 distinct age classes time point. Another variant, drm_7, modifies drm_3 structure: retains formulation probability absence models recruitment AR(1) process constant across patches, makes survival dependent SBT. Finally, comparison, different class model, sdm, fitted. specified zero-augmented Gamma SDM absence probability component followed structure used drm_3, conditional density (positive observations) modeled quadratic function SST. compare models goodness--fit use loo package, implements Leave-One-Information Criterion (LOOIC, Vehtari, Gelman, Gabry 2017). First, create list LOOIC model, compare using loo_compare function: loo_compare outputs table difference LOOIC best model (terms LOOIC goodness--fit metric) models orders differences “best” “worst” fit. model best goodness--fit necessarily delivers best predictions (forecasts). forecasts model easily computed predict_drm (predict_sdm, applied output fit_sdm) function. See . Now, display comparisons Goodness--fit predictive skill. table, Δ\\Delta-LOOIC represents difference LOOIC model best fit; RMSE root mean square error prediction; interval score; PIC frequentist coverage 80% prediction intervals; Time time (seconds) fit models. Despite second-best model fit based LOOIC, SDM yielded second-worst predictive performance according RMSE . suggests DRM’s mechanistic formulation enhances forecasting ability, potentially outweighing slightly less optimal fit statistic. understandable, DRMs incorporate biologically-informed constraints can improve predictions.","code":"baseline <-   fit_drm(.data = dat_train,           y_col    = \"dens\", ## response variable: density           time_col = \"year\", ## vector of time points           site_col = \"patch\",           seed = 202505) drm_1 <-   fit_drm(.data = dat_train,           y_col = \"dens\",           time_col = \"year\",           site_col = \"patch\",           seed = 202505,           formula_zero = ~ 1 + c_hauls + c_btemp + c_stemp,           formula_rec = ~ 1 + c_stemp + I(c_stemp * c_stemp),           init = \"cmdstan_default\") drm_2 <-   fit_drm(.data = dat_train,           y_col = \"dens\", ## response variable: density           time_col = \"year\", ## vector of time points           site_col = \"patch\",           seed = 202505,           formula_zero = ~ 1 + c_hauls + c_btemp + c_stemp,           formula_rec = ~ 1 + c_stemp + c_stemp * c_stemp,           formula_surv = ~ 1,           m = 0,           .toggles = list(est_surv = 1))  drm_3 <-   fit_drm(.data = dat_train,           y_col = \"dens\", ## response variable: density           time_col = \"year\", ## vector of time points           site_col = \"patch\",           seed = 202505,           formula_zero = ~ 1 + c_hauls + c_btemp + c_stemp,           formula_rec = ~ 1 + c_stemp + I(c_stemp * c_stemp),           formula_surv = ~ 1,           .toggles = list(est_surv = 1,                           ar_re = \"rec\")) ## loading map map_name <- system.file(\"maps/sum_fl.shp\", package = \"drmr\")  polygons <- st_read(map_name)  adj_mat <- gen_adj(st_buffer(st_geometry(polygons),                              dist = 2500))  ## row-standardized matrix adj_mat <-   t(apply(adj_mat, 1, \\(x) x / (sum(x))))  drm_4 <-   fit_drm(.data = dat_train,           y_col = \"dens\", ## response variable: density           time_col = \"year\", ## vector of time points           site_col = \"patch\",           family = \"gamma\",           seed = 202505,           formula_zero = ~ 1 + c_hauls + c_btemp + c_stemp,           formula_rec = ~ 1 + c_stemp + I(c_stemp * c_stemp),           formula_surv = ~ 1,           n_ages = 6,           adj_mat = adj_mat, ## A matrix for movement routine           ages_movement = c(0, 0, 1, 1, 1, 0), ## ages allowed to move           .toggles = list(est_surv = 1,                           ar_re = \"rec\",                           movement = 1))  drm_5 <-   fit_drm(.data = dat_train,           y_col = \"dens\", ## response variable: density           time_col = \"year\", ## vector of time points           site_col = \"patch\",           family = \"gamma\",           seed = 202505,           formula_zero = ~ 1 + c_hauls + c_btemp + c_stemp,           formula_rec = ~ 1 + c_stemp + I(c_stemp * c_stemp),           formula_surv = ~ 1,           n_ages = 6,           .toggles = list(est_surv = 1,                           ar_re = \"rec\"))  ## instantaneous fishing mortality rates fmat <-   system.file(\"fmat.rds\", package = \"drmr\") |>   readRDS()  f_train <- fmat[, years_train] f_test  <- fmat[, years_test]  drm_6 <-   fit_drm(.data = dat_train,           y_col = \"dens\", ## response variable: density           time_col = \"year\", ## vector of time points           site_col = \"patch\",           family = \"gamma\",           seed = 202505,           formula_zero = ~ 1 + c_hauls + c_btemp + c_stemp,           formula_rec = ~ 1 + c_stemp + I(c_stemp * c_stemp),           formula_surv = ~ 1,           n_ages = NROW(f_train),           f_mort = f_train,           .toggles = list(ar_re = \"rec\",                           est_surv = 1))  drm_7 <-   fit_drm(.data = dat_train,           y_col = \"dens\", ## response variable: density           time_col = \"year\", ## vector of time points           site_col = \"patch\",           family = \"gamma\",           seed = 202505,           formula_zero = ~ 1 + c_hauls + c_btemp + c_stemp,           formula_rec = ~ 1,           formula_surv = ~ 1 + c_btemp + I(c_btemp * c_btemp),           .toggles = list(ar_re = \"rec\",                           est_surv = 1))  sdm <-   fit_sdm(.data = dat_train,           y_col = \"dens\", ## response variable: density           time_col = \"year\", ## vector of time points           site_col = \"patch\",           seed = 202505,           formula_zero = ~ 1 + c_hauls + c_btemp + c_stemp,           formula_dens = ~ 1 + c_stemp + I(c_stemp * c_stemp),           .toggles = list(ar_re = \"rec\")) loos <- list(\"baseline\" = baseline$stanfit$loo(),              \"drm_1\" = drm_1$stanfit$loo(),              \"drm_2\" = drm_2$stanfit$loo(),              \"drm_3\" = drm_3$stanfit$loo(),              \"drm_4\" = drm_4$stanfit$loo(),              \"drm_5\" = drm_5$stanfit$loo(),              \"drm_6\" = drm_6$stanfit$loo(),              \"drm_7\" = drm_7$stanfit$loo(),              \"sdm\"   = sdm$stanfit$loo())  loos_out <- loo::loo_compare(loos) forecast_0 <- predict_drm(drm = baseline,                           new_data = dat_test,                           seed = 125,                           cores = 4)  forecast_1 <- predict_drm(drm = drm_1,                           new_data = dat_test,                           seed = 125,                           cores = 4)  forecast_2 <- predict_drm(drm = drm_2,                           new_data = dat_test,                           past_data = filter(dat_train,                                              year == max(year)),                           seed = 125,                           cores = 4)  forecast_3 <- predict_drm(drm = drm_3,                           new_data = dat_test,                           past_data = filter(dat_train,                                              year == max(year)),                           seed = 125,                           cores = 4)  forecast_4 <- predict_drm(drm = drm_4,                           new_data = dat_test,                           past_data = filter(dat_train,                                              year == max(year)),                           seed = 125,                           cores = 4)  forecast_5 <- predict_drm(drm = drm_5,                           new_data = dat_test,                           past_data = filter(dat_train,                                              year == max(year)),                           seed = 125,                           cores = 4)  forecast_6 <- predict_drm(drm = drm_6,                           new_data = dat_test,                           past_data = filter(dat_train,                                              year == max(year)),                           f_test = f_test,                           seed = 125,                           cores = 4)  forecast_7 <- predict_drm(drm = drm_7,                           new_data = dat_test,                           past_data = filter(dat_train,                                              year == max(year)),                           seed = 125,                           cores = 4)  forecast_sdm <-   predict_sdm(sdm = sdm,               new_data = dat_test,               seed = 125,               cores = 4)  ##--- summarizing forecasts ----  all_forecasts <-   ls(pattern = \"^forecast_\") all_drms <-   ls(pattern = \"^(baseline|drm_|sdm)\")  forecasts_summary <-   Map(f = \\(x, nm) {     fct <- get(x)     fct$draws(variables = \"y_proj\",               format = \"draws_df\") |>       tidyr::pivot_longer(cols = starts_with(\"y_proj\"),                           names_to = \"pair\",                           values_to = \"expected\") |>       group_by(pair) |>       summarise(ll = quantile(expected, probs = .05),                 l = quantile(expected, probs = .1),                 m = median(expected),                 u = quantile(expected, probs = .9),                 uu = quantile(expected, probs = .95)) |>       ungroup() |>       mutate(pair = gsub(\"\\\\D\", \"\", pair)) |>       mutate(pair = as.integer(pair)) |>       arrange(pair) |>       mutate(model = nm,              .before = 1)   }, x = all_forecasts, nm = all_drms)  forecasts_summary <-   bind_rows(forecasts_summary)  forecasts_summary <-   dat_test |>   select(dens, lat_floor, patch, year) |>   mutate(pair = row_number()) |>   left_join(forecasts_summary, by = \"pair\") forecasts_summary |>   mutate(bias = dens - m) |>   mutate(rmse = bias * bias) |>   mutate(is = int_score(dens, l = l, u = u, alpha = .2)) |>   mutate(cvg = 100 * dplyr::between(dens, l, u)) |>   ungroup() |>   group_by(model) |>   summarise(across(rmse:cvg, mean)) |>   ungroup() |>   rename_all(toupper) |>   rename(\"Model\" = \"MODEL\",          \"IS (80%)\" = \"IS\",          \"PIC (80%)\" = \"CVG\") |>   left_join(aux_qt,             by = \"Model\") |>   arrange(desc(LOOIC)) |>   relocate(LOOIC, .after = \"Model\")"},{"path":"https://pinskylab.github.io/drmr/articles/examples.html","id":"coming-soon","dir":"Articles","previous_headings":"","what":"Coming soon","title":"Examples","text":"working following additional vignettes: priors used models modify toggles specific options Initialization population dynamics","code":""},{"path":[]},{"path":"https://pinskylab.github.io/drmr/articles/get-started.html","id":"data-processing-splitting","dir":"Articles","previous_headings":"","what":"Data processing & splitting","title":"Get Started","text":"assess model predictions, chunk splits data train test. Finally, transform response variable density. elements need fit DRM : response variable representing density variable encoding time-points variable encoding patches (sites). current version functions assumes rows dataset every combinations “time” “site”. , dataset comprises observations around density given species across 20 years 10 patches, expect 20 rows dataset per patch. Equivalently, expect 10 rows dataset per year. first last 10 rows dat_train object look follows: Note , stemp explanatory variable denoting sea surface temperature (SST).","code":"## 5 years-ahead predictions first_year_forecast <- max(sum_fl$year) - 5  first_id_forecast <-   first_year_forecast - min(sum_fl$year) + 1  years_all <- length(unique(sum_fl$year)) years_train <- years_all[years_all < first_id_forecast] years_test <- years_all[years_all >= first_id_forecast]  ## splitting data dat_test <- sum_fl |>   filter(year >= first_year_forecast)  dat_train <- sum_fl |>   filter(year < first_year_forecast) dat_train <- dat_train |>   mutate(dens = y / area_km2,          .before = y)  dat_test <- dat_test |>   mutate(dens = y / area_km2,          .before = y) head(dat_train[, c(\"year\", \"patch\",  \"y\", \"stemp\")],      n = 10) # A tibble: 10 × 4     year patch     y stemp    <dbl> <int> <dbl> <dbl>  1  1982     1     2  24.5  2  1983     1     9  25.4  3  1984     1     0  20.5  4  1985     1     0  24.5  5  1986     1     0  22.6  6  1987     1     0  25.9  7  1988     1     1  23.2  8  1989     1     0  25.8  9  1990     1     2  24.5 10  1991     1     4  25.4 tail(dat_train[, c(\"year\", \"patch\",  \"y\", \"stemp\")],      n = 10) # A tibble: 10 × 4     year patch     y stemp    <dbl> <int> <dbl> <dbl>  1  2001    10     0  11.1  2  2002    10     0  11.6  3  2003    10     0  10.4  4  2004    10     0  10.0  5  2005    10     0  11.1  6  2006    10     0  11.8  7  2007    10     0  10.3  8  2008    10     0  10.2  9  2009    10     0  10.3 10  2010    10     0  10.2"},{"path":"https://pinskylab.github.io/drmr/articles/get-started.html","id":"fitting-diagnosing-a-model","dir":"Articles","previous_headings":"","what":"Fitting & diagnosing a model","title":"Get Started","text":"Provided dataset properly formatted, simple model considering existance 8 age groups natural mortality rate 0.25 can fit follows: mcmc_samples object named list. One positions called stanfit. can use stanfit position output cmdstanr model. instance, assess convergence MCMC, one can run:","code":"mcmc_samples <-   fit_drm(.data = dat_train,           y_col = \"dens\",           time_col = \"year\",           site_col = \"patch\",           n_ages = 8,           m = 0.25,           seed = 2025) Running MCMC with 4 parallel chains...  Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup) Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: Chain 1 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 595, column 4 to column 54) Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. Chain 1 Chain 2 Iteration:    1 / 2000 [  0%]  (Warmup) Chain 2 Iteration:  100 / 2000 [  5%]  (Warmup) Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: Chain 2 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 595, column 4 to column 54) Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. Chain 2 Chain 3 Iteration:    1 / 2000 [  0%]  (Warmup) Chain 3 Iteration:  100 / 2000 [  5%]  (Warmup) Chain 3 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: Chain 3 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 595, column 4 to column 54) Chain 3 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, Chain 3 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. Chain 3 Chain 3 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: Chain 3 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 595, column 4 to column 54) Chain 3 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, Chain 3 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. Chain 3 Chain 3 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: Chain 3 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 595, column 4 to column 54) Chain 3 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, Chain 3 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. Chain 3 Chain 3 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: Chain 3 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 595, column 4 to column 54) Chain 3 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, Chain 3 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. Chain 3 Chain 4 Iteration:    1 / 2000 [  0%]  (Warmup) Chain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: Chain 4 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 595, column 4 to column 54) Chain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, Chain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. Chain 4 Chain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: Chain 4 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 595, column 4 to column 54) Chain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, Chain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. Chain 4 Chain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: Chain 4 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 595, column 4 to column 54) Chain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, Chain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. Chain 4 Chain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: Chain 4 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 595, column 4 to column 54) Chain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, Chain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. Chain 4 Chain 1 Iteration:  100 / 2000 [  5%]  (Warmup) Chain 1 Iteration:  200 / 2000 [ 10%]  (Warmup) Chain 4 Iteration:  100 / 2000 [  5%]  (Warmup) Chain 2 Iteration:  200 / 2000 [ 10%]  (Warmup) Chain 3 Iteration:  200 / 2000 [ 10%]  (Warmup) Chain 1 Iteration:  300 / 2000 [ 15%]  (Warmup) Chain 4 Iteration:  200 / 2000 [ 10%]  (Warmup) Chain 3 Iteration:  300 / 2000 [ 15%]  (Warmup) Chain 1 Iteration:  400 / 2000 [ 20%]  (Warmup) Chain 2 Iteration:  300 / 2000 [ 15%]  (Warmup) Chain 3 Iteration:  400 / 2000 [ 20%]  (Warmup) Chain 4 Iteration:  300 / 2000 [ 15%]  (Warmup) Chain 4 Iteration:  400 / 2000 [ 20%]  (Warmup) Chain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) Chain 2 Iteration:  400 / 2000 [ 20%]  (Warmup) Chain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) Chain 1 Iteration:  600 / 2000 [ 30%]  (Warmup) Chain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) Chain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) Chain 3 Iteration:  600 / 2000 [ 30%]  (Warmup) Chain 1 Iteration:  700 / 2000 [ 35%]  (Warmup) Chain 4 Iteration:  600 / 2000 [ 30%]  (Warmup) Chain 2 Iteration:  600 / 2000 [ 30%]  (Warmup) Chain 3 Iteration:  700 / 2000 [ 35%]  (Warmup) Chain 4 Iteration:  700 / 2000 [ 35%]  (Warmup) Chain 1 Iteration:  800 / 2000 [ 40%]  (Warmup) Chain 2 Iteration:  700 / 2000 [ 35%]  (Warmup) Chain 3 Iteration:  800 / 2000 [ 40%]  (Warmup) Chain 1 Iteration:  900 / 2000 [ 45%]  (Warmup) Chain 4 Iteration:  800 / 2000 [ 40%]  (Warmup) Chain 2 Iteration:  800 / 2000 [ 40%]  (Warmup) Chain 3 Iteration:  900 / 2000 [ 45%]  (Warmup) Chain 4 Iteration:  900 / 2000 [ 45%]  (Warmup) Chain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) Chain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) Chain 2 Iteration:  900 / 2000 [ 45%]  (Warmup) Chain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) Chain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) Chain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) Chain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) Chain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling) Chain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) Chain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) Chain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling) Chain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling) Chain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling) Chain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling) Chain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling) Chain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling) Chain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling) Chain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling) Chain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling) Chain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling) Chain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling) Chain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling) Chain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling) Chain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling) Chain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling) Chain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) Chain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) Chain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) Chain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) Chain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling) Chain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling) Chain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling) Chain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling) Chain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling) Chain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling) Chain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling) Chain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling) Chain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling) Chain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling) Chain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling) Chain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling) Chain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling) Chain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling) Chain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling) Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling) Chain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling) Chain 4 finished in 4.3 seconds. Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling) Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling) Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling) Chain 1 finished in 4.6 seconds. Chain 2 finished in 4.6 seconds. Chain 3 finished in 4.6 seconds.  All 4 chains finished successfully. Mean chain execution time: 4.5 seconds. Total execution time: 4.7 seconds. mcmc_samples$stanfit$draws(variables = c(\"phi\",                                          \"beta_t\",                                          \"beta_r\")) |>   mcmc_combo(combo = c(\"trace\", \"dens_overlay\"),              facet_args = list(labeller = label_parsed))"},{"path":"https://pinskylab.github.io/drmr/articles/init.html","id":"user-provided-densities","dir":"Articles","previous_headings":"","what":"User provided densities","title":"Densities’ initialization","text":"direct method, activated providing numeric vector init_data argument fit_drm. works: user supplies vector log-transformed densities length n_ages - 1, corresponding initial densities ages 2 n_ages (total number age classes). Limitation: method applies initial age structure patches, may capture pre-existing spatial variation.","code":""},{"path":"https://pinskylab.github.io/drmr/articles/init.html","id":"estimate-age-specific-initial-densities","dir":"Articles","previous_headings":"","what":"Estimate age-specific initial densities","title":"Densities’ initialization","text":"option enabled setting est_init = 1 toggle. works: Instead requiring fixed inputs, model treats initial log-densities ages 2 n_ages free parameters estimated. Limitation: Similar user-provided option, method estimates single set initial densities applied uniformly across patches. also caution approach can introduce substantial uncertainty, sometimes resulting wide prediction intervals.","code":""},{"path":"https://pinskylab.github.io/drmr/articles/init.html","id":"estimate-age-specific-densities-from-mortality-rates","dir":"Articles","previous_headings":"","what":"Estimate age-specific densities from mortality rates","title":"Densities’ initialization","text":"dynamic approach activated setting minit = 1 toggle. particularly useful external, age-specific mortality data available. works: method assumes population stable age distribution just first year observation. uses model’s estimated (externally provided) mortality recruitment rates reconstruct initial age-specific densities patch. Unlike methods, allows initial age structure vary spatially across patches, reflecting local differences estimated recruitment survival rates.","code":""},{"path":[]},{"path":"https://pinskylab.github.io/drmr/articles/ppt.html","id":"drm-model-parameters-and-priors","dir":"Articles","previous_headings":"","what":"DRM model parameters and priors","title":"Parameters, priors, and toggles","text":"table details parameter DRM. “Toggle” column indicates condition needed include parameter model. parameter activated toggle, excluded model, prior used.","code":""},{"path":"https://pinskylab.github.io/drmr/articles/ppt.html","id":"sdm","dir":"Articles","previous_headings":"","what":"SDM","title":"Parameters, priors, and toggles","text":"TBD","code":""},{"path":[]},{"path":"https://pinskylab.github.io/drmr/articles/theory.html","id":"sec-notation","dir":"Articles","previous_headings":"","what":"Notation","title":"Theoretical Background","text":"diving coding, let us establish common notation understand estimating. Ecological data species density often exhibits zeros. occurs species may patchily distributed sampling methods may fail detect individuals low densities. Since densities continuous non-negative quantities, use discrete probability distributions (e.g., Poisson Binomial) model type phenomena. However, standard continuous probability distributions assign zero probability specific values (, Pr(Yt,=c)=0\\mathrm{Pr}(Y_{t, } = c) = 0, constant cc continuous probability distribution). address , use zero-augmented (Hurdle/Delta) models, explicitly account excess zeros combining discrete continuous probability distribution two components: probability observing zero (probability absence): accounts “true” absence non-detection species. continuous distribution positive values: models density species present. Formally, let Yt,iY_{t, } random variable representing density (individuals per unit area) focal species time tt patch/site ii. denote realizations (.e., observe) Yt,iY_{t, } yt,iy_{t, }. define zero-augmented probability density function (pdf) follows: f(yt,∣μt,,ϕ,ρt,)={ρt,, yt,=0,(1−ρt,)g(yt,∣μt,,ϕ), yt,>0,(1) f(y_{t, } \\mid \\mu_{t, }, \\phi, \\rho_{t, }) = \\begin{cases} \\rho_{t, }, & \\text{ } y_{t, } = 0, \\\\ (1 - \\rho_{t, }) g(y_{t, } \\mid \\mu_{t, }, \\phi), & \\text{ } y_{t, } > 0,  \\end{cases}  \\qquad(1) ρt,=Pr(Yt,=0)\\rho_{t, } = \\mathrm{Pr}(Y_{t, } = 0) probability observing zero density. g(⋅∣μt,,ϕ)g(\\cdot \\mid \\mu_{t, }, \\phi) pdf continuous probability distribution expected value (theoretical mean) μt,\\mu_{t, } additional parameter ϕ\\phi. distribution represents densities species present. Equation 1, can choose different probability distributions specify pdf g(⋅∣μt,,ϕ)g(\\cdot \\mid \\mu_{t, }, \\phi). Popular choices include Log-Normal, Log-Logistic, Gamma distributions, can parametrized terms mean facilitating modeling (Ye et al. 2021).","code":""},{"path":"https://pinskylab.github.io/drmr/articles/theory.html","id":"sec-sdm","dir":"Articles","previous_headings":"","what":"Species Distribution Models","title":"Theoretical Background","text":"typical SDM based Equation 1 relates parameters zero-augmented distribution environmental covariates. Let t=1,…,Tt = 1, \\ldots, T represent time points =1,…,Pi = 1, \\ldots, P represents patches/sites. first assumptions SDMs Y1,1,…,YT,PY_{1, 1}, \\ldots, Y_{T, P} independent random variables conditioned environmental factors. , SDMs based (generalized) linear models discussed. define 𝐱t,(1)\\mathbf{x}^{(1)}_{t, } vector p1p_1 covariates related probability observing zero density time tt site ii, 𝐱t,(2)\\mathbf{x}^{(2)}_{t, } vector p2p_2 covariates related (theoretical) mean density species present. Note , 𝐱t,(1)\\mathbf{x}^{(1)}_{t, } 𝐱t,(2)\\mathbf{x}^{(2)}_{t, } may depend different set environmental factors. define linear-predictors follows: ηt,(1)=𝛃(1)𝐱t,(1)ηt,(1)=𝛃(2)𝐱t,(2),(2) \\begin{aligned} \\eta^{(1)}_{t, } & = \\boldsymbol{\\beta}^{(1)}\\mathbf{x}^{(1)}_{t, } \\\\ \\eta^{(1)}_{t, } & = \\boldsymbol{\\beta}^{(2)}\\mathbf{x}^{(2)}_{t, }, \\end{aligned}  \\qquad(2) 𝛃(1)\\boldsymbol{\\beta}^{(1)} 𝛃(2)\\boldsymbol{\\beta}^{(2)} vectors regression coefficients. Finally, introduction suitable link functions, h1h_1 h2h_2, relate linear predictors (consequently environmental factors) probability absence ρt,\\rho_{t, } mean density μt,\\mu_{t, } follows: h1(ρt,)=ηt,(1)h2(μt,)=ηt,(2).(3) \\begin{aligned} h_1(\\rho_{t, }) & = \\eta^{(1)}_{t, } \\\\ h_2(\\mu_{t, }) & = \\eta^{(2)}_{t, }. \\end{aligned}  \\qquad(3) link functions ensure estimated absence probabilities mean densities appropriate scale. instance, h1h_1 function take number 0 1 input outputs real number. Common choices h1h_1 logit\\mathrm{logit} cloglog\\mathrm{cloglog} functions. latter asymmetric preferred proportion zeros high low. h2h_2, log\\log function often used ensures predicted mean densities positive. assumption independence can relaxed introducing random effects model.","code":""},{"path":"https://pinskylab.github.io/drmr/articles/theory.html","id":"sec-drm","dir":"Articles","previous_headings":"","what":"Dynamic Range Models","title":"Theoretical Background","text":"Similar SDMs, DRM based Equation 1 also relates parameters zero-augmented distribution environmental covariates. However, DRMs offer comprehensive approach incorporating explicit representations underlying biological processes govern species distributions. advancement enables integration expert knowledge empirical data regarding species demography, dispersal patterns, mechanistic interactions environmental factors (Pagel Schurr 2012). assumptions DRM placed mean density μt,\\mu_{t, }, probability absence remaining SDM. fact, assumptions can interpreted non-linear function environmental variables. particular, make assumptions (unobserved1) age-structure behind densities given time point patch. Define Ya,t,iY_{, t, } random variable representing unobserved density (individuals per unit area) individuals age aa, ∈{1,…,}\\\\{1, \\ldots, \\}. Similarly, denote expected density (theoretical mean given age, time, patch) : λa,t,=𝔼[Ya,t,]. \\lambda_{, t, } = \\mathbb{E}[Y_{, t, }].  observe Ya,,tY_{, , t} assume previously defined (overall) density, actually observe, sum densities across age groups. words, Yt,=∑aYa,t,iY_{t, } = \\sum_{} Y_{, t, }. Consequently, μt,=∑aλa,t,.(4) \\mu_{t, } = \\sum_{} \\lambda_{, t, }.  \\qquad(4) Biological processes additional assumptions encoded expected “age densities” λa,t,\\lambda_{, t, }. key process consider : recruitment, survival, movement. described . begin defining expected density recruits (fish age =1a = 1) time tt patch ii : 𝔼[Y1,,t]=λ1,,t=exp{ψ},(5)  \\mathbb{E}[Y_{1, , t}] = \\lambda_{1, , t} = \\exp \\{\\psi \\},  \\qquad(5) exp{ψ}\\exp\\{ \\psi \\} represents overall mean recruitment per unit area. assumption Equation 5 quite restrictive. make model realistic, can replace constant ψ\\psi ψt,=𝛃r𝐱t,(r)+zt,(r),(6) \\psi_{t, } = \\boldsymbol{\\beta}_r \\mathbf{x}^{(r)}_{t, } + z^{(r)}_{t, },  \\qquad(6) ~𝐱t,(r)\\mathbf{x}^{(r)}_{t, } vector environmental drivers associated recruitment time~tt patch~ii, 𝛃r\\boldsymbol{\\beta}_r vector corresponding regression coefficients. depicts log-linear relationship recruitment environment. account influence time recruitment (SDM densities), introduce random effect Equation Equation 6. current version model, random effect across groups given time point, meaning zt,(r)=zt(r)z_{t, }^{(r)} = z_{t}^{(r)} every ii. creates temporal dependence, recruitment density one point time related value previous time point. model temporal dependence using autoregressive process order 1 (AR(1)). Formally, defined : zt(r)=αzt−1(r)+εt,(7) z_{t}^{(r)} = \\alpha z_{t - 1}^{(r)} + \\varepsilon_{t},  \\qquad(7) ε1,…,εT\\varepsilon_{1}, \\ldots, \\varepsilon_{T} independent identically distributed residual terms zero-mean Normal distribution variance τ2\\tau^2, α\\alpha temporal autocorrelation parameter. model, recruitment (density Equation 2) time tt function value time t−1t - 1, plus random error term. proposed model, expected density age aa, time tt, patch ii evolves time according survival rates denoted sa,t,is_{, t, }. Formally, 𝔼[Ya,t,]=λa,t,=λa−1,t−1,isa−1,t−1, \\mathbb{E}[Y_{, t, }] = \\lambda_{, t, } = \\lambda_{- 1, t - 1, } s_{- 1, t - 1}, recruitment, survival rates may vary patch/site ii time tt: sa,t,=exp{𝛃m⊤𝐱t,(m)},(8) s_{, t, } = \\exp \\{ \\boldsymbol{\\beta}^{\\top}_m \\mathbf{x}^{(m)}_{t,  } \\},  \\qquad(8) 𝐱t,(m)\\mathbf{x}^{(m)}_{t, } represents environmental drivers potentially different affecting recruitment, 𝛃m\\boldsymbol{\\beta}_m associated regression coefficients. Note , despite age-specific index~aa, survival rates constant across age-groups. Equation 8, may use external information allow different survival rates across age-groups. instance, fisheries research, stock assessments often provide estimates age-specific fishing mortality instantaneous rates several species. reasonable, logical, assume survival rates age-group higher fishing mortality lower. case, Equation~ may updated : sa,t,=exp{𝛃m⊤𝐱t,(m)−fa,t}, s_{, t, } = \\exp \\{ \\boldsymbol{\\beta}^{\\top}_m \\mathbf{x}^{(m)}_{t, } - f_{, t} \\}, ~fa,tf_{, t} instantaneous rate fishing mortality age-group~aa time~tt. current implementation, allow random effect mortality/survival yet. Movement important demographic process affecting species’ densities. package, implement simplistic movement routine described follows. Denote PP total number patches present study. age-group, define P×PP \\times P movement matrix denoted 𝐌a\\mathbf{M}_a. element {,j}\\{, j\\} 𝐌a\\mathbf{M}_a represents probability individuals age aa move patch ii time t−1t - 1 patch jj time tt. movement matrix 𝐌a\\mathbf{M}_a derived adjacency matrix 𝐀\\mathbf{}, encodes connections patches. 𝐀\\mathbf{}, element {,j}\\{, j\\} given 𝐀ij={1/N(), ∼j,0, otherwise,   \\mathbf{}_{ij} = \\begin{cases}     1 / N(), & \\text{ } \\sim j, \\\\     0, & \\text{ otherwise},   \\end{cases} N()N() number neighbors patch ii, ∼ji \\sim j indicates ii jj neighbors (.e., share borders). addition adjacency matrix 𝐀\\mathbf{}, user must also indicate age-groups ``allowed’’ move. age group assumed move, movement matrix becomes identity matrix. Given inputs, define ζ\\zeta probability individuals remaining patch two time points. movement matrix constructed : 𝐌a=ζ𝐈P+(1−ζ)𝐀,(9)   \\mathbf{M}_{} = \\zeta \\mathbf{}_{P} + (1 - \\zeta) \\mathbf{},  \\qquad(9) 𝐈P\\mathbf{}_{P} P×PP \\times P identity matrix. words, probability remaining patch fixed, probability moving~(.e., (1−ζ)(1 - \\zeta)) evenly distributed across neighbors. extend setting , least, three ways: (1) allowing ζ\\zeta vary time patch; (2) different movement probabilities different age-groups, (3) make movement probabilities vary according environmental conditions~. extensions, however, represent significant increase computation. Therefore, now, opted stick simplest option. movement matrix defined, need adjust age-specific expected densities accordingly. Let 𝛌a,t,⋅\\boldsymbol{\\lambda}_{, t, \\cdot} vector length PP (number patches) representing expected densities age aa time tt every patch given study. movement, expected density : 𝛌̃,t,⋅=𝐌a𝛌a−1,t−1,⋅,(10)   \\tilde{\\boldsymbol{\\lambda}}_{, t, \\cdot} = \\mathbf{M}_a   \\boldsymbol{\\lambda}_{- 1, t - 1, \\cdot},  \\qquad(10) 𝐌a\\mathbf{M}_a aforementioned movement matrix. main data source, trawl surveys, often exhibit age-based selectivity, younger fish lower probability caught due smaller size. particular, probability capturing animal given length given encounters gear denoted selectivity length. hand, selectivity age probability capturing fish certain age, provided “encountered gear”. represent selectivity age vector 𝐯=[v1,…,vA]⊤\\mathbf{v} = [v_1, \\ldots, v_A]^\\top, AA total number age groups. element vav_a vector value 0 1, inclusive, representing selectivity age group aa. package estimate 𝐯\\mathbf{v} , unless provided user, assumes selectivity 1 every age group. vector 𝐯\\mathbf{v} provided, model assumes: Yt,=∑avaYa,t,Y_{t, } = \\sum_{} v_a Y_{, t, } , consequently, μt,=∑avaλa,t,. \\mu_{t, } = \\sum_{} v_a \\lambda_{, t, }. Note , model estimate selectivity. Instead, model assumes provided known without error. course, oversimplification, however, seldomly necessary data estimate selectivity readily available. cvf","code":""},{"path":"https://pinskylab.github.io/drmr/articles/theory.html","id":"sec-rec","dir":"Articles","previous_headings":"","what":"Recruitment","title":"Theoretical Background","text":"begin defining expected density recruits (fish age =1a = 1) time tt patch ii : 𝔼[Y1,,t]=λ1,,t=exp{ψ},(5)  \\mathbb{E}[Y_{1, , t}] = \\lambda_{1, , t} = \\exp \\{\\psi \\},  \\qquad(5) exp{ψ}\\exp\\{ \\psi \\} represents overall mean recruitment per unit area. assumption Equation 5 quite restrictive. make model realistic, can replace constant ψ\\psi ψt,=𝛃r𝐱t,(r)+zt,(r),(6) \\psi_{t, } = \\boldsymbol{\\beta}_r \\mathbf{x}^{(r)}_{t, } + z^{(r)}_{t, },  \\qquad(6) ~𝐱t,(r)\\mathbf{x}^{(r)}_{t, } vector environmental drivers associated recruitment time~tt patch~ii, 𝛃r\\boldsymbol{\\beta}_r vector corresponding regression coefficients. depicts log-linear relationship recruitment environment. account influence time recruitment (SDM densities), introduce random effect Equation Equation 6. current version model, random effect across groups given time point, meaning zt,(r)=zt(r)z_{t, }^{(r)} = z_{t}^{(r)} every ii. creates temporal dependence, recruitment density one point time related value previous time point. model temporal dependence using autoregressive process order 1 (AR(1)). Formally, defined : zt(r)=αzt−1(r)+εt,(7) z_{t}^{(r)} = \\alpha z_{t - 1}^{(r)} + \\varepsilon_{t},  \\qquad(7) ε1,…,εT\\varepsilon_{1}, \\ldots, \\varepsilon_{T} independent identically distributed residual terms zero-mean Normal distribution variance τ2\\tau^2, α\\alpha temporal autocorrelation parameter. model, recruitment (density Equation 2) time tt function value time t−1t - 1, plus random error term.","code":""},{"path":"https://pinskylab.github.io/drmr/articles/theory.html","id":"sec-surv","dir":"Articles","previous_headings":"","what":"Survival","title":"Theoretical Background","text":"proposed model, expected density age aa, time tt, patch ii evolves time according survival rates denoted sa,t,is_{, t, }. Formally, 𝔼[Ya,t,]=λa,t,=λa−1,t−1,isa−1,t−1, \\mathbb{E}[Y_{, t, }] = \\lambda_{, t, } = \\lambda_{- 1, t - 1, } s_{- 1, t - 1}, recruitment, survival rates may vary patch/site ii time tt: sa,t,=exp{𝛃m⊤𝐱t,(m)},(8) s_{, t, } = \\exp \\{ \\boldsymbol{\\beta}^{\\top}_m \\mathbf{x}^{(m)}_{t,  } \\},  \\qquad(8) 𝐱t,(m)\\mathbf{x}^{(m)}_{t, } represents environmental drivers potentially different affecting recruitment, 𝛃m\\boldsymbol{\\beta}_m associated regression coefficients. Note , despite age-specific index~aa, survival rates constant across age-groups. Equation 8, may use external information allow different survival rates across age-groups. instance, fisheries research, stock assessments often provide estimates age-specific fishing mortality instantaneous rates several species. reasonable, logical, assume survival rates age-group higher fishing mortality lower. case, Equation~ may updated : sa,t,=exp{𝛃m⊤𝐱t,(m)−fa,t}, s_{, t, } = \\exp \\{ \\boldsymbol{\\beta}^{\\top}_m \\mathbf{x}^{(m)}_{t, } - f_{, t} \\}, ~fa,tf_{, t} instantaneous rate fishing mortality age-group~aa time~tt. current implementation, allow random effect mortality/survival yet.","code":""},{"path":"https://pinskylab.github.io/drmr/articles/theory.html","id":"sec-movement","dir":"Articles","previous_headings":"","what":"Movement","title":"Theoretical Background","text":"Movement important demographic process affecting species’ densities. package, implement simplistic movement routine described follows. Denote PP total number patches present study. age-group, define P×PP \\times P movement matrix denoted 𝐌a\\mathbf{M}_a. element {,j}\\{, j\\} 𝐌a\\mathbf{M}_a represents probability individuals age aa move patch ii time t−1t - 1 patch jj time tt. movement matrix 𝐌a\\mathbf{M}_a derived adjacency matrix 𝐀\\mathbf{}, encodes connections patches. 𝐀\\mathbf{}, element {,j}\\{, j\\} given 𝐀ij={1/N(), ∼j,0, otherwise,   \\mathbf{}_{ij} = \\begin{cases}     1 / N(), & \\text{ } \\sim j, \\\\     0, & \\text{ otherwise},   \\end{cases} N()N() number neighbors patch ii, ∼ji \\sim j indicates ii jj neighbors (.e., share borders). addition adjacency matrix 𝐀\\mathbf{}, user must also indicate age-groups ``allowed’’ move. age group assumed move, movement matrix becomes identity matrix. Given inputs, define ζ\\zeta probability individuals remaining patch two time points. movement matrix constructed : 𝐌a=ζ𝐈P+(1−ζ)𝐀,(9)   \\mathbf{M}_{} = \\zeta \\mathbf{}_{P} + (1 - \\zeta) \\mathbf{},  \\qquad(9) 𝐈P\\mathbf{}_{P} P×PP \\times P identity matrix. words, probability remaining patch fixed, probability moving~(.e., (1−ζ)(1 - \\zeta)) evenly distributed across neighbors. extend setting , least, three ways: (1) allowing ζ\\zeta vary time patch; (2) different movement probabilities different age-groups, (3) make movement probabilities vary according environmental conditions~. extensions, however, represent significant increase computation. Therefore, now, opted stick simplest option. movement matrix defined, need adjust age-specific expected densities accordingly. Let 𝛌a,t,⋅\\boldsymbol{\\lambda}_{, t, \\cdot} vector length PP (number patches) representing expected densities age aa time tt every patch given study. movement, expected density : 𝛌̃,t,⋅=𝐌a𝛌a−1,t−1,⋅,(10)   \\tilde{\\boldsymbol{\\lambda}}_{, t, \\cdot} = \\mathbf{M}_a   \\boldsymbol{\\lambda}_{- 1, t - 1, \\cdot},  \\qquad(10) 𝐌a\\mathbf{M}_a aforementioned movement matrix.","code":""},{"path":"https://pinskylab.github.io/drmr/articles/theory.html","id":"sec-selectivity","dir":"Articles","previous_headings":"","what":"Selectivity at age","title":"Theoretical Background","text":"main data source, trawl surveys, often exhibit age-based selectivity, younger fish lower probability caught due smaller size. particular, probability capturing animal given length given encounters gear denoted selectivity length. hand, selectivity age probability capturing fish certain age, provided “encountered gear”. represent selectivity age vector 𝐯=[v1,…,vA]⊤\\mathbf{v} = [v_1, \\ldots, v_A]^\\top, AA total number age groups. element vav_a vector value 0 1, inclusive, representing selectivity age group aa. package estimate 𝐯\\mathbf{v} , unless provided user, assumes selectivity 1 every age group. vector 𝐯\\mathbf{v} provided, model assumes: Yt,=∑avaYa,t,Y_{t, } = \\sum_{} v_a Y_{, t, } , consequently, μt,=∑avaλa,t,. \\mu_{t, } = \\sum_{} v_a \\lambda_{, t, }. Note , model estimate selectivity. Instead, model assumes provided known without error. course, oversimplification, however, seldomly necessary data estimate selectivity readily available. cvf","code":""},{"path":"https://pinskylab.github.io/drmr/articles/theory.html","id":"bayesian-inference-and-forecasting","dir":"Articles","previous_headings":"","what":"Bayesian Inference and Forecasting","title":"Theoretical Background","text":"complete Bayesian model specification, need specify prior distributions model parameters. involves defining prior beliefs likely values parameters observing data. First, define priors fixed effects regression coefficients, typically denoted 𝛃\\boldsymbol{\\beta} superscrip. default priors coefficients uncorrelated zero-mean Normal distributions marginal variances 1. parameter ϕ\\phi, controls scale non-zero part pdfs Equation 1 (e.g., Log-Normal, Gamma, Log-Logistic), Gamma prior shape rate parameters equal 2 1, respectively. general, scale parameter varies pdf chosen. Next, specify priors parameters associated AR(1) process Equation Equation 7. take hierarchical approach, placing Normal prior log square root conditional variance (.e., log conditional standard deviation). prior default mean −2-2 standard deviation 0.25, favoring model AR(1) term. autocorrelation term, employ beta prior α\\alpha. default parameters prior 0.50.5 0.50.5. Lastly, Beta prior ζ\\zeta. priors default hyperparameters highlighted table : Denote 𝛉\\boldsymbol{\\theta} set containing parameters associated model chosen. posterior distribution 𝛉\\boldsymbol{\\theta} (𝐳\\mathbf{z}) given observed data 𝐲\\mathbf{y} environmental factors 𝐗\\mathbf{X} π(𝛉,𝐳∣𝐲)∝p(𝐲∣𝐗,𝐳,𝛃,𝛄)π(𝐳∣𝛔,𝛅)π(𝛉),(11)   \\pi(\\boldsymbol{\\theta}, \\mathbf{z} \\mid \\mathbf{y}) \\propto   p(\\mathbf{y} \\mid \\mathbf{X}, \\mathbf{z}, \\boldsymbol{\\beta}, \\boldsymbol{\\gamma})   \\pi(\\mathbf{z}  \\mid \\boldsymbol{\\sigma}, \\boldsymbol{\\delta})   \\pi(\\boldsymbol{\\theta}),  \\qquad(11) π(⋅)\\pi(\\cdot) denotes prior posterior distributions arguments. Importantly, distribution placed random effects 𝐳\\mathbf{z} also functions prior, draw samples random effects distribution conditioned observed data. estimation model parameters obtained posterior distribution defined Equation 11. posterior distribution intractable, use -U-Turn (Hoffman Gelman 2014) Markov Chain Monte Carlo~(MCMC) sampler available Stan draw samples . -U-Turn algorithm samples model parameters jointly efficiently exploits parameter space using automatic differentiation. Additionally, eliminates need hand-tuning, making highly convenient sampler. initialize parameters samples respective prior distributions. latent random effects initialized standard Gaussian distribution. number samples warm-period MCMC algorithm application dependent. assess convergence chains using split-R̂\\hat{R} diagnostic (Vehtari et al. 2021). Finally, parameters’ point estimates 95% credible intervals~(CI) obtained , respectively, median percentiles (2.52.5 97.597.5, unless otherwise stated) marginal MCMC samples. assessment goodness--fit GoF carried using leave-one-information criterion [Vehtari, Gelman, Gabry (2017); LOOIC]. Lower LOOIC values indicate better fit. Given posterior MCMC samples, can obtain Monte Carlo samples posterior predictive distribution different environmental conditions make forecasts. Suppose wish compute forecasts kk time points ahead. define kk-dimensional variable 𝐘*\\mathbf{Y}^\\ast representing densities time points. Assuming environmental time points also available, can generate predictions accounting uncertainty using posterior predictive distribution 𝐘*\\mathbf{Y}^\\ast: p(𝐲*∣𝐲)=∫p(𝐲*∣𝐳*,𝛉)p(𝐳*∣𝐳,𝛉)π(𝛉∣𝐲)d𝛉,(12)   p(\\mathbf{y}^{\\ast} \\mid \\mathbf{y}) = \\int p(\\mathbf{y}^{\\ast} \\mid   \\mathbf{z}^{\\ast}, \\boldsymbol{\\theta})   p(\\mathbf{z}^{\\ast} \\mid \\mathbf{z}, \\boldsymbol{\\theta})   \\pi(\\boldsymbol{\\theta}   \\mid \\mathbf{y}) \\mathrm{d} \\boldsymbol{\\theta},  \\qquad(12) 𝐳*=(zT+1),…,zT+k))⊤\\mathbf{z}^\\ast = {(z_{T+1}), \\ldots, z_{T + k}))}^\\top realization AR(1) process new time points, 𝛉\\boldsymbol{\\theta} represents model parameters. Moreover, pdf p(𝐲*∣𝐳*,𝛉)p(\\mathbf{y}^{\\ast} \\mid \\mathbf{z}^{\\ast}, \\boldsymbol{\\theta}) can obtained Section 3 Section 2.","code":""},{"path":"https://pinskylab.github.io/drmr/articles/theory.html","id":"parameter-estimation","dir":"Articles","previous_headings":"","what":"Parameter estimation","title":"Theoretical Background","text":"estimation model parameters obtained posterior distribution defined Equation 11. posterior distribution intractable, use -U-Turn (Hoffman Gelman 2014) Markov Chain Monte Carlo~(MCMC) sampler available Stan draw samples . -U-Turn algorithm samples model parameters jointly efficiently exploits parameter space using automatic differentiation. Additionally, eliminates need hand-tuning, making highly convenient sampler. initialize parameters samples respective prior distributions. latent random effects initialized standard Gaussian distribution. number samples warm-period MCMC algorithm application dependent. assess convergence chains using split-R̂\\hat{R} diagnostic (Vehtari et al. 2021). Finally, parameters’ point estimates 95% credible intervals~(CI) obtained , respectively, median percentiles (2.52.5 97.597.5, unless otherwise stated) marginal MCMC samples.","code":""},{"path":"https://pinskylab.github.io/drmr/articles/theory.html","id":"model-comparison","dir":"Articles","previous_headings":"","what":"Model comparison","title":"Theoretical Background","text":"assessment goodness--fit GoF carried using leave-one-information criterion [Vehtari, Gelman, Gabry (2017); LOOIC]. Lower LOOIC values indicate better fit.","code":""},{"path":"https://pinskylab.github.io/drmr/articles/theory.html","id":"predictionsforecasting","dir":"Articles","previous_headings":"","what":"Predictions/Forecasting","title":"Theoretical Background","text":"Given posterior MCMC samples, can obtain Monte Carlo samples posterior predictive distribution different environmental conditions make forecasts. Suppose wish compute forecasts kk time points ahead. define kk-dimensional variable 𝐘*\\mathbf{Y}^\\ast representing densities time points. Assuming environmental time points also available, can generate predictions accounting uncertainty using posterior predictive distribution 𝐘*\\mathbf{Y}^\\ast: p(𝐲*∣𝐲)=∫p(𝐲*∣𝐳*,𝛉)p(𝐳*∣𝐳,𝛉)π(𝛉∣𝐲)d𝛉,(12)   p(\\mathbf{y}^{\\ast} \\mid \\mathbf{y}) = \\int p(\\mathbf{y}^{\\ast} \\mid   \\mathbf{z}^{\\ast}, \\boldsymbol{\\theta})   p(\\mathbf{z}^{\\ast} \\mid \\mathbf{z}, \\boldsymbol{\\theta})   \\pi(\\boldsymbol{\\theta}   \\mid \\mathbf{y}) \\mathrm{d} \\boldsymbol{\\theta},  \\qquad(12) 𝐳*=(zT+1),…,zT+k))⊤\\mathbf{z}^\\ast = {(z_{T+1}), \\ldots, z_{T + k}))}^\\top realization AR(1) process new time points, 𝛉\\boldsymbol{\\theta} represents model parameters. Moreover, pdf p(𝐲*∣𝐳*,𝛉)p(\\mathbf{y}^{\\ast} \\mid \\mathbf{z}^{\\ast}, \\boldsymbol{\\theta}) can obtained Section 3 Section 2.","code":""},{"path":"https://pinskylab.github.io/drmr/articles/theory.html","id":"pontential-issues-with-estimation-closed-formulas-for-special-cases","dir":"Articles","previous_headings":"","what":"Pontential issues with estimation & Closed formulas for special cases","title":"Theoretical Background","text":"Define sa,t,=exp{mi,t−fa,t}, s_{, t, } = \\exp \\{ m_{, t} - f_{, t} \\}, environment dependent survival age aa time tt site ii. , scenario without movement, expected density age aa time tt site ii can written : λa,t,=exp{ψt,+zt(r)∏k=1a−1sk,t,}=exp{ψt,+zt(r)}exp{(−1)mt,−∑k=1a−1fa,t}. \\begin{align} \\lambda_{, t, } & = \\exp \\{ \\psi_{t, } + z_{t}^{(r)} \\prod_{k = 1}^{- 1} s_{k, t, } \\} \\\\ & = \\exp \\{ \\psi_{t, } + z_{t}^{(r)} \\} \\exp \\left \\{ (- 1) m_{t, }- \\sum_{k = 1}^{- 1} f_{, t} \\right \\}. \\end{align} Therefore, closed form expected density μi,t\\mu_{, t} : μt,=∑=1Aλa,t,=exp{ψt,+zt(r)}(1+∑=2Aexp{(−1)mt,−∑k=1a−1fk,t}). \\begin{align} \\mu_{t, } & = \\sum_{= 1}^{} \\lambda_{, t, } \\\\ & = \\exp \\{ \\psi_{t, } + z_{t}^{(r)} \\} \\left (1 + \\sum_{= 2}^{} \\exp \\left \\{ (- 1) m_{t, } - \\sum_{k = 1}^{- 1} f_{k, t} \\right \\} \\right ). \\end{align} , selectivity, μt,=∑=1Avaλa,t,=exp{ψt,+zt(r)}(v1+∑=2Avaexp{(−1)mt,−∑k=1a−1fk,t}). \\begin{align} \\mu_{t, } & = \\sum_{= 1}^{} v_a \\lambda_{, t, } \\\\ & = \\exp \\{ \\psi_{t, } + z_{t}^{(r)} \\} \\left (v_1 + \\sum_{= 2}^{} v_a \\exp \\left \\{ (- 1) m_{t, } - \\sum_{k = 1}^{- 1} f_{k, t} \\right \\} \\right ). \\end{align}","code":""},{"path":[]},{"path":"https://pinskylab.github.io/drmr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lucas da Cunha Godoy. Author, maintainer.","code":""},{"path":"https://pinskylab.github.io/drmr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"da Cunha Godoy L (2025). drmr: R package pre-compiled cmdstan code dynamic range models. R package version 0.2.1, https://pinskylab.github.io/drmr/.","code":"@Manual{,   title = {drmr: An R package with pre-compiled cmdstan code for dynamic range models},   author = {Lucas {da Cunha Godoy}},   year = {2025},   note = {R package version 0.2.1},   url = {https://pinskylab.github.io/drmr/}, }"},{"path":[]},{"path":[]},{"path":"https://pinskylab.github.io/drmr/index.html","id":"installation","dir":"","previous_headings":"Dynamic Range Models in R","what":"Installation","title":"An R package with pre-compiled cmdstan code for dynamic range models","text":"installation development version GitHub can done via","code":"remotes::install_github(\"pinskylab/drmr\") ## or devtools::install_github(\"pinskylab/drmr\")"},{"path":"https://pinskylab.github.io/drmr/reference/apply_movement.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple movement to population dynamics — apply_movement","title":"Simple movement to population dynamics — apply_movement","text":"Apply \"simple\" movement population dynamics.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/apply_movement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple movement to population dynamics — apply_movement","text":"","code":"apply_movement(lambda, M, mov_age)"},{"path":"https://pinskylab.github.io/drmr/reference/apply_movement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple movement to population dynamics — apply_movement","text":"lambda array number individuals per age, time, patch M movement matrix mov_age ages movement starts (can generalized)","code":""},{"path":"https://pinskylab.github.io/drmr/reference/apply_movement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple movement to population dynamics — apply_movement","text":"array numbers age, year patch","code":""},{"path":"https://pinskylab.github.io/drmr/reference/apply_movement.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simple movement to population dynamics — apply_movement","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/between.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if elements in x are between corresponding elements in lb and ub — between","title":"Check if elements in x are between corresponding elements in lb and ub — between","text":"Check elements x corresponding elements lb ub","code":""},{"path":"https://pinskylab.github.io/drmr/reference/between.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if elements in x are between corresponding elements in lb and ub — between","text":"","code":"between(x, lb, ub)"},{"path":"https://pinskylab.github.io/drmr/reference/between.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if elements in x are between corresponding elements in lb and ub — between","text":"x numeric vector. lb numeric vector lower bounds. ub numeric vector upper bounds.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/between.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if elements in x are between corresponding elements in lb and ub — between","text":"logical vector length x, indicating whether element x corresponding elements lb ub.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/between.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if elements in x are between corresponding elements in lb and ub — between","text":"","code":"between(1:5, 1, 5) #> [1] TRUE TRUE TRUE TRUE TRUE between(1:5, 2, 4) #> [1] FALSE  TRUE  TRUE  TRUE FALSE"},{"path":"https://pinskylab.github.io/drmr/reference/between_scalar.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if elements in x are between corresponding elements in lb and ub — between_scalar","title":"Check if elements in x are between corresponding elements in lb and ub — between_scalar","text":"Check elements x corresponding elements lb ub","code":""},{"path":"https://pinskylab.github.io/drmr/reference/between_scalar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if elements in x are between corresponding elements in lb and ub — between_scalar","text":"","code":"between_scalar(x, lb, ub)"},{"path":"https://pinskylab.github.io/drmr/reference/between_scalar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if elements in x are between corresponding elements in lb and ub — between_scalar","text":"x numeric vector. lb numeric vector lower bounds. ub numeric vector upper bounds.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/between_scalar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if elements in x are between corresponding elements in lb and ub — between_scalar","text":"logical vector length x, indicating whether element x corresponding elements lb ub.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/between_scalar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if elements in x are between corresponding elements in lb and ub — between_scalar","text":"","code":"between(1:5, 1, 5) #> [1] TRUE TRUE TRUE TRUE TRUE between(1:5, 2, 4) #> [1] FALSE  TRUE  TRUE  TRUE FALSE"},{"path":"https://pinskylab.github.io/drmr/reference/check_between.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if x is between lb and ub — check_between","title":"Check if x is between lb and ub — check_between","text":"Check x lb ub","code":""},{"path":"https://pinskylab.github.io/drmr/reference/check_between.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if x is between lb and ub — check_between","text":"","code":"check_between(x, lb, ub)"},{"path":"https://pinskylab.github.io/drmr/reference/check_between.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if x is between lb and ub — check_between","text":"x numeric vector. lb numeric vector lower bounds. ub numeric vector upper bounds.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/check_between.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if x is between lb and ub — check_between","text":"return value. function stops execution following conditions met: lb greater equal ub. lengths lb ub equal. lengths lb, ub, x equal.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/check_pars.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate input data for prior_sample() — check_pars","title":"Validate input data for prior_sample() — check_pars","text":"Checks provided data list valid given model. internal function intended direct use.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/check_pars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate input data for prior_sample() — check_pars","text":"","code":"check_pars(dat, model)"},{"path":"https://pinskylab.github.io/drmr/reference/check_pars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate input data for prior_sample() — check_pars","text":"dat list containing data, typically generated make_data() make_data_sdm(). model character string specifying model type. Must either \"drm\" \"sdm\". Defaults \"drm\".","code":""},{"path":"https://pinskylab.github.io/drmr/reference/check_pars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate input data for prior_sample() — check_pars","text":"function return value. stops execution error message data valid specified model.","code":""},{"path":[]},{"path":"https://pinskylab.github.io/drmr/reference/check_pars.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Validate input data for prior_sample() — check_pars","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/default_priors.html","id":null,"dir":"Reference","previous_headings":"","what":"Default priors' hyperparameters — default_priors","title":"Default priors' hyperparameters — default_priors","text":"Returns default priors' hyperparameters DRM model.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/default_priors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default priors' hyperparameters — default_priors","text":"","code":"default_priors()"},{"path":"https://pinskylab.github.io/drmr/reference/default_priors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default priors' hyperparameters — default_priors","text":"list (explain values)","code":""},{"path":"https://pinskylab.github.io/drmr/reference/default_priors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Default priors' hyperparameters — default_priors","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/default_toggles.html","id":null,"dir":"Reference","previous_headings":"","what":"Default toggles — default_toggles","title":"Default toggles — default_toggles","text":"Returns default toggles DRM model.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/default_toggles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default toggles — default_toggles","text":"","code":"default_toggles()"},{"path":"https://pinskylab.github.io/drmr/reference/default_toggles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default toggles — default_toggles","text":"list (explain values)","code":""},{"path":"https://pinskylab.github.io/drmr/reference/default_toggles.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Default toggles — default_toggles","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/drmr.html","id":null,"dir":"Reference","previous_headings":"","what":"drmr: Dynamic Range Models in Stan — drmr","title":"drmr: Dynamic Range Models in Stan — drmr","text":"Fitting process-based species distribution models stan.","code":""},{"path":[]},{"path":"https://pinskylab.github.io/drmr/reference/drmr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"drmr: Dynamic Range Models in Stan — drmr","text":"Maintainer: Lucas da Cunha Godoy lcgodoy@duck.com (ORCID)","code":""},{"path":"https://pinskylab.github.io/drmr/reference/dtn.html","id":null,"dir":"Reference","previous_headings":"","what":"Density of a truncated Normal distribution — dtn","title":"Density of a truncated Normal distribution — dtn","text":"Calculates density truncated Normal distribution.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/dtn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Density of a truncated Normal distribution — dtn","text":"","code":"dtn(x, mean = 0, sd = 1, range = c(0, Inf), log = FALSE)"},{"path":"https://pinskylab.github.io/drmr/reference/dtn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Density of a truncated Normal distribution — dtn","text":"x numeric vector evaluate density. mean numeric scalar representing mean underlying normal distribution. Defaults 0. sd numeric scalar representing standard deviation underlying normal distribution. Defaults 1. range numeric vector length 2 specifying lower upper truncation bounds. Defaults c(0, Inf), indicating truncation 0. log Logical; TRUE, natural logarithm density returned. Defaults FALSE.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/dtn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Density of a truncated Normal distribution — dtn","text":"numeric vector length x, containing (log) density values truncated normal distribution.","code":""},{"path":[]},{"path":"https://pinskylab.github.io/drmr/reference/dtn.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Density of a truncated Normal distribution — dtn","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/dtt.html","id":null,"dir":"Reference","previous_headings":"","what":"Density of a truncated Student's t distribution — dtt","title":"Density of a truncated Student's t distribution — dtt","text":"Calculates density truncated Student's t distribution.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/dtt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Density of a truncated Student's t distribution — dtt","text":"","code":"dtt(x, mu = 0, sd = 1, df = 3, range = c(0, Inf), log = FALSE)"},{"path":"https://pinskylab.github.io/drmr/reference/dtt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Density of a truncated Student's t distribution — dtt","text":"x numeric vector evaluate density. mu numeric scalar representing mean underlying t distribution. Defaults 0. sd numeric scalar representing standard deviation underlying t distribution. Defaults 1. df numeric scalar representing degrees freedom underlying t distribution. Defaults 3. range numeric vector length 2 specifying lower upper truncation bounds. Defaults c(0, Inf), indicating truncation 0. log Logical; TRUE, natural logarithm density returned.  Defaults FALSE.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/dtt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Density of a truncated Student's t distribution — dtt","text":"numeric vector length x, containing (log) density values truncated t distribution.","code":""},{"path":[]},{"path":"https://pinskylab.github.io/drmr/reference/dtt.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Density of a truncated Student's t distribution — dtt","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/fit_drm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit the dynamic range model. — fit_drm","title":"Fit the dynamic range model. — fit_drm","text":"Fit DRM Stan model (function stable yet fully tested).","code":""},{"path":"https://pinskylab.github.io/drmr/reference/fit_drm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit the dynamic range model. — fit_drm","text":"","code":"fit_drm(   .data,   y_col,   time_col,   site_col,   family = \"gamma\",   formula_zero = ~1,   formula_rec = ~1,   formula_surv = NULL,   iter_warmup = 1000,   iter_sampling = 1000,   chains = 4,   parallel_chains = 4,   seed,   init = \"cmdstan_default\",   ... )"},{"path":"https://pinskylab.github.io/drmr/reference/fit_drm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit the dynamic range model. — fit_drm","text":".data data frame containing data model. y_col character specifying name column .data contains response variable. time_col character specifying name column .data contains time variable. site_col character specifying name column .data contains site variable. family character specifying family probability distribution assumed density. options : \"gamma\" (default): gamma parametrized terms mean; \"lognormal\": log-normal parametrized terms mean; \"loglogistic\": log-logistic parametrized terms mean. \"lognormal_legacy\" (default): log-normal usual parametrization; formula_zero formula specifying model zero inflation component. Defaults ~ 1 (intercept ). formula_rec formula specifying model recruitment component. Defaults ~ 1 (intercept ). formula_surv formula specifying model survival component. NULL (default), survival component included. iter_warmup integer specifying number warmup iterations MCMC sampler. Defaults 1000. iter_sampling integer specifying number sampling iterations MCMC sampler. Defaults 1000. chains integer specifying number MCMC chains. Defaults 4. parallel_chains integer specifying number chains run parallel. Defaults 4. seed integer specifying random number seed. init scalar specifying initialization method. default (NULL) represents cmdstan default, scalar greater zero, say x, initialized parameters uniform -x x, 0 initialize parameters 0, \"prior\" (initialize model parameters using samples prior) \"pathfinder\". ... Passed make_data() function used build input list cmdstanr model.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/fit_drm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit the dynamic range model. — fit_drm","text":"list containing MCMC draws, model data, linear predictors formulas, (response, time, site) column names. Specifically: stanfit: MCMC draws fitted model. data: data used fit model (list). formulas: formulas used create design matrices. cols: Important column names.","code":""},{"path":[]},{"path":"https://pinskylab.github.io/drmr/reference/fit_drm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fit the dynamic range model. — fit_drm","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/fit_drm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit the dynamic range model. — fit_drm","text":"","code":"if (instantiate::stan_cmdstan_exists()) {   data(sum_fl)   fit_drm(.data = sum_fl,           y_col = \"y\",           time_col = \"year\",           site_col = \"patch\",           seed = 2025)$stanfit$summary() } #> Running MCMC with 4 parallel chains... #>  #> Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 595, column 4 to column 54) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 595, column 4 to column 54) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 595, column 4 to column 54) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: gamma_lpdf: Inverse scale parameter[1] is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 616, column 4 to column 49) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 595, column 4 to column 54) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 2 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 2 Iteration:  100 / 2000 [  5%]  (Warmup)  #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 595, column 4 to column 54) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2  #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 595, column 4 to column 54) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2  #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 595, column 4 to column 54) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2  #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 595, column 4 to column 54) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2  #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 595, column 4 to column 54) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2  #> Chain 3 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 3 Iteration:  100 / 2000 [  5%]  (Warmup)  #> Chain 3 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 3 Exception: gamma_lpdf: Inverse scale parameter[1] is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 616, column 4 to column 49) #> Chain 3 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 3 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 3  #> Chain 3 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 3 Exception: gamma_lpdf: Inverse scale parameter[1] is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 616, column 4 to column 49) #> Chain 3 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 3 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 3  #> Chain 3 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 3 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 595, column 4 to column 54) #> Chain 3 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 3 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 3  #> Chain 3 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 3 Exception: gamma_lpdf: Inverse scale parameter[1] is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 616, column 4 to column 49) #> Chain 3 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 3 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 3  #> Chain 4 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 4 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 595, column 4 to column 54) #> Chain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 4  #> Chain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 4 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 595, column 4 to column 54) #> Chain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 4  #> Chain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 4 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 595, column 4 to column 54) #> Chain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 4  #> Chain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 4 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 595, column 4 to column 54) #> Chain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 4  #> Chain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 4 Exception: gamma_lpdf: Inverse scale parameter[1] is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 616, column 4 to column 49) #> Chain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 4  #> Chain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 4 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 595, column 4 to column 54) #> Chain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 4  #> Chain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 4 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258520fa9567.stan', line 595, column 4 to column 54) #> Chain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 4  #> Chain 1 Iteration:  100 / 2000 [  5%]  (Warmup)  #> Chain 4 Iteration:  100 / 2000 [  5%]  (Warmup)  #> Chain 1 Iteration:  200 / 2000 [ 10%]  (Warmup)  #> Chain 3 Iteration:  200 / 2000 [ 10%]  (Warmup)  #> Chain 4 Iteration:  200 / 2000 [ 10%]  (Warmup)  #> Chain 2 Iteration:  200 / 2000 [ 10%]  (Warmup)  #> Chain 1 Iteration:  300 / 2000 [ 15%]  (Warmup)  #> Chain 3 Iteration:  300 / 2000 [ 15%]  (Warmup)  #> Chain 4 Iteration:  300 / 2000 [ 15%]  (Warmup)  #> Chain 4 Iteration:  400 / 2000 [ 20%]  (Warmup)  #> Chain 1 Iteration:  400 / 2000 [ 20%]  (Warmup)  #> Chain 3 Iteration:  400 / 2000 [ 20%]  (Warmup)  #> Chain 2 Iteration:  300 / 2000 [ 15%]  (Warmup)  #> Chain 3 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 4 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 1 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 2 Iteration:  400 / 2000 [ 20%]  (Warmup)  #> Chain 4 Iteration:  600 / 2000 [ 30%]  (Warmup)  #> Chain 1 Iteration:  600 / 2000 [ 30%]  (Warmup)  #> Chain 3 Iteration:  600 / 2000 [ 30%]  (Warmup)  #> Chain 4 Iteration:  700 / 2000 [ 35%]  (Warmup)  #> Chain 2 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 1 Iteration:  700 / 2000 [ 35%]  (Warmup)  #> Chain 3 Iteration:  700 / 2000 [ 35%]  (Warmup)  #> Chain 4 Iteration:  800 / 2000 [ 40%]  (Warmup)  #> Chain 2 Iteration:  600 / 2000 [ 30%]  (Warmup)  #> Chain 1 Iteration:  800 / 2000 [ 40%]  (Warmup)  #> Chain 3 Iteration:  800 / 2000 [ 40%]  (Warmup)  #> Chain 4 Iteration:  900 / 2000 [ 45%]  (Warmup)  #> Chain 2 Iteration:  700 / 2000 [ 35%]  (Warmup)  #> Chain 1 Iteration:  900 / 2000 [ 45%]  (Warmup)  #> Chain 3 Iteration:  900 / 2000 [ 45%]  (Warmup)  #> Chain 2 Iteration:  800 / 2000 [ 40%]  (Warmup)  #> Chain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 2 Iteration:  900 / 2000 [ 45%]  (Warmup)  #> Chain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling)  #> Chain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling)  #> Chain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling)  #> Chain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling)  #> Chain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling)  #> Chain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling)  #> Chain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling)  #> Chain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling)  #> Chain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling)  #> Chain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling)  #> Chain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling)  #> Chain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling)  #> Chain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling)  #> Chain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling)  #> Chain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling)  #> Chain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling)  #> Chain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling)  #> Chain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling)  #> Chain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling)  #> Chain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling)  #> Chain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling)  #> Chain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling)  #> Chain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling)  #> Chain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling)  #> Chain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling)  #> Chain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling)  #> Chain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling)  #> Chain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling)  #> Chain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling)  #> Chain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling)  #> Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 4 finished in 7.5 seconds. #> Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling)  #> Chain 1 finished in 7.7 seconds. #> Chain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling)  #> Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 2 finished in 8.1 seconds. #> Chain 3 finished in 8.0 seconds. #>  #> All 4 chains finished successfully. #> Mean chain execution time: 7.8 seconds. #> Total execution time: 8.2 seconds. #>  #> # A tibble: 1,776 × 10 #>    variable        mean    median     sd    mad       q5      q95  rhat ess_bulk #>    <chr>          <dbl>     <dbl>  <dbl>  <dbl>    <dbl>    <dbl> <dbl>    <dbl> #>  1 lp__       -1363.    -1363.    1.43   1.23   -1.37e+3 -1.36e+3  1.00    1527. #>  2 lxi[1]        -1.24     -1.18  0.551  0.531  -2.26e+0 -4.57e-1  1.00    1218. #>  3 phi[1]         0.720     0.717 0.0569 0.0567  6.29e-1  8.18e-1  1.00    2344. #>  4 beta_r[1]      3.38      3.38  0.0774 0.0772  3.26e+0  3.51e+0  1.00    2426. #>  5 beta_t[1]      0.612     0.522 0.633  0.622  -2.78e-1  1.81e+0  1.00    1206. #>  6 xi[1]         -0.330    -0.307 0.162  0.159  -6.33e-1 -1.05e-1  1.00    1218. #>  7 log_rec[1]     3.38      3.38  0.0774 0.0772  3.26e+0  3.51e+0  1.00    2426. #>  8 log_rec[2]     3.38      3.38  0.0774 0.0772  3.26e+0  3.51e+0  1.00    2426. #>  9 log_rec[3]     3.38      3.38  0.0774 0.0772  3.26e+0  3.51e+0  1.00    2426. #> 10 log_rec[4]     3.38      3.38  0.0774 0.0772  3.26e+0  3.51e+0  1.00    2426. #> # ℹ 1,766 more rows #> # ℹ 1 more variable: ess_tail <dbl>"},{"path":"https://pinskylab.github.io/drmr/reference/fit_sdm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a GLM based SDM — fit_sdm","title":"Fit a GLM based SDM — fit_sdm","text":"Fit SDM Stan model (function stable yet fully tested).","code":""},{"path":"https://pinskylab.github.io/drmr/reference/fit_sdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a GLM based SDM — fit_sdm","text":"","code":"fit_sdm(   .data,   y_col,   time_col,   site_col,   family = \"gamma\",   formula_zero = ~1,   formula_dens = ~1,   iter_warmup = 1000,   iter_sampling = 1000,   chains = 4,   parallel_chains = 4,   seed,   init = \"cmdstan_default\",   ... )"},{"path":"https://pinskylab.github.io/drmr/reference/fit_sdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a GLM based SDM — fit_sdm","text":".data data frame containing data model. y_col character specifying name column .data contains response variable. time_col character specifying name column .data contains time variable. site_col character specifying name column .data contains site variable. family character specifying family probability distribution assumed density. options : \"gamma\" (default): gamma parametrized terms mean; \"lognormal\": log-normal parametrized terms mean; \"loglogistic\": log-logistic parametrized terms mean. \"lognormal_legacy\" (default): log-normal usual parametrization; formula_zero formula specifying model zero inflation component. Defaults ~ 1 (intercept ). formula_dens formula specifying model non-zero density component. Defaults ~ 1 (intercept ). iter_warmup integer specifying number warmup iterations MCMC sampler. Defaults 1000. iter_sampling integer specifying number sampling iterations MCMC sampler. Defaults 1000. chains integer specifying number MCMC chains. Defaults 4. parallel_chains integer specifying number chains run parallel. Defaults 4. seed integer specifying random number seed. init scalar specifying initialization method. default (NULL) represents cmdstan default, scalar greater zero, say x, initialized parameters uniform -x x, 0 initialize parameters 0, \"prior\" (initialize model parameters using samples prior) \"pathfinder\". ... Passed make_data() function used build input list cmdstanr model.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/fit_sdm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a GLM based SDM — fit_sdm","text":"list containing MCMC draws, model data, linear predictors formulas, (response, time, site) column names. stanfit: MCMC draws fitted model. data: data used fit model (list). formulas: data used fit model (list). cols: Important column names.","code":""},{"path":[]},{"path":"https://pinskylab.github.io/drmr/reference/fit_sdm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fit a GLM based SDM — fit_sdm","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/fit_sdm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a GLM based SDM — fit_sdm","text":"","code":"if (instantiate::stan_cmdstan_exists()) {   data(sum_fl)   fit_sdm(.data = sum_fl,           y_col = \"y\",           time_col = \"year\",           site_col = \"patch\",           seed = 2025)$stanfit$summary() } #> Running MCMC with 4 parallel chains... #>  #> Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 1 Iteration:  100 / 2000 [  5%]  (Warmup)  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258526199c9.stan', line 285, column 4 to column 54) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258526199c9.stan', line 285, column 4 to column 54) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258526199c9.stan', line 285, column 4 to column 54) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258526199c9.stan', line 285, column 4 to column 54) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258526199c9.stan', line 285, column 4 to column 54) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 1 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 1 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258526199c9.stan', line 285, column 4 to column 54) #> Chain 1 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 1 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 1  #> Chain 2 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 2 Iteration:  100 / 2000 [  5%]  (Warmup)  #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258526199c9.stan', line 285, column 4 to column 54) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2  #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258526199c9.stan', line 285, column 4 to column 54) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2  #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258526199c9.stan', line 285, column 4 to column 54) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2  #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: gamma_lpdf: Inverse scale parameter[1] is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258526199c9.stan', line 306, column 4 to column 49) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2  #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258526199c9.stan', line 285, column 4 to column 54) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2  #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: gamma_lpdf: Inverse scale parameter[1] is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258526199c9.stan', line 306, column 4 to column 49) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2  #> Chain 3 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 3 Iteration:  100 / 2000 [  5%]  (Warmup)  #> Chain 3 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 3 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258526199c9.stan', line 285, column 4 to column 54) #> Chain 3 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 3 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 3  #> Chain 3 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 3 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258526199c9.stan', line 285, column 4 to column 54) #> Chain 3 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 3 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 3  #> Chain 3 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 3 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258526199c9.stan', line 285, column 4 to column 54) #> Chain 3 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 3 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 3  #> Chain 3 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 3 Exception: gamma_lpdf: Inverse scale parameter[1] is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258526199c9.stan', line 306, column 4 to column 49) #> Chain 3 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 3 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 3  #> Chain 4 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 4 Iteration:  100 / 2000 [  5%]  (Warmup)  #> Chain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 4 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258526199c9.stan', line 285, column 4 to column 54) #> Chain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 4  #> Chain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 4 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258526199c9.stan', line 285, column 4 to column 54) #> Chain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 4  #> Chain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 4 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258526199c9.stan', line 285, column 4 to column 54) #> Chain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 4  #> Chain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 4 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258526199c9.stan', line 285, column 4 to column 54) #> Chain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 4  #> Chain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 4 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258526199c9.stan', line 285, column 4 to column 54) #> Chain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 4  #> Chain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 4 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258526199c9.stan', line 285, column 4 to column 54) #> Chain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 4  #> Chain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 4 Exception: gamma_lpdf: Random variable is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258526199c9.stan', line 285, column 4 to column 54) #> Chain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 4  #> Chain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 4 Exception: gamma_lpdf: Inverse scale parameter[1] is 0, but must be positive finite! (in '/tmp/RtmpCm6HIz/model-258526199c9.stan', line 306, column 4 to column 49) #> Chain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 4  #> Chain 1 Iteration:  200 / 2000 [ 10%]  (Warmup)  #> Chain 2 Iteration:  200 / 2000 [ 10%]  (Warmup)  #> Chain 3 Iteration:  200 / 2000 [ 10%]  (Warmup)  #> Chain 1 Iteration:  300 / 2000 [ 15%]  (Warmup)  #> Chain 2 Iteration:  300 / 2000 [ 15%]  (Warmup)  #> Chain 4 Iteration:  200 / 2000 [ 10%]  (Warmup)  #> Chain 3 Iteration:  300 / 2000 [ 15%]  (Warmup)  #> Chain 1 Iteration:  400 / 2000 [ 20%]  (Warmup)  #> Chain 2 Iteration:  400 / 2000 [ 20%]  (Warmup)  #> Chain 4 Iteration:  300 / 2000 [ 15%]  (Warmup)  #> Chain 1 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 3 Iteration:  400 / 2000 [ 20%]  (Warmup)  #> Chain 4 Iteration:  400 / 2000 [ 20%]  (Warmup)  #> Chain 2 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 4 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 1 Iteration:  600 / 2000 [ 30%]  (Warmup)  #> Chain 2 Iteration:  600 / 2000 [ 30%]  (Warmup)  #> Chain 1 Iteration:  700 / 2000 [ 35%]  (Warmup)  #> Chain 3 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 4 Iteration:  600 / 2000 [ 30%]  (Warmup)  #> Chain 1 Iteration:  800 / 2000 [ 40%]  (Warmup)  #> Chain 2 Iteration:  700 / 2000 [ 35%]  (Warmup)  #> Chain 3 Iteration:  600 / 2000 [ 30%]  (Warmup)  #> Chain 1 Iteration:  900 / 2000 [ 45%]  (Warmup)  #> Chain 2 Iteration:  800 / 2000 [ 40%]  (Warmup)  #> Chain 3 Iteration:  700 / 2000 [ 35%]  (Warmup)  #> Chain 4 Iteration:  700 / 2000 [ 35%]  (Warmup)  #> Chain 2 Iteration:  900 / 2000 [ 45%]  (Warmup)  #> Chain 4 Iteration:  800 / 2000 [ 40%]  (Warmup)  #> Chain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 3 Iteration:  800 / 2000 [ 40%]  (Warmup)  #> Chain 4 Iteration:  900 / 2000 [ 45%]  (Warmup)  #> Chain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 3 Iteration:  900 / 2000 [ 45%]  (Warmup)  #> Chain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling)  #> Chain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling)  #> Chain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling)  #> Chain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling)  #> Chain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling)  #> Chain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling)  #> Chain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling)  #> Chain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling)  #> Chain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling)  #> Chain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling)  #> Chain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling)  #> Chain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling)  #> Chain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling)  #> Chain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling)  #> Chain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling)  #> Chain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling)  #> Chain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling)  #> Chain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling)  #> Chain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling)  #> Chain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling)  #> Chain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling)  #> Chain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling)  #> Chain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling)  #> Chain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling)  #> Chain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling)  #> Chain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling)  #> Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling)  #> Chain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling)  #> Chain 2 finished in 3.5 seconds. #> Chain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling)  #> Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling)  #> Chain 1 finished in 3.7 seconds. #> Chain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling)  #> Chain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling)  #> Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 3 finished in 3.9 seconds. #> Chain 4 finished in 3.9 seconds. #>  #> All 4 chains finished successfully. #> Mean chain execution time: 3.8 seconds. #> Total execution time: 4.1 seconds. #>  #> # A tibble: 1,406 × 10 #>    variable       mean    median     sd    mad        q5      q95  rhat ess_bulk #>    <chr>         <dbl>     <dbl>  <dbl>  <dbl>     <dbl>    <dbl> <dbl>    <dbl> #>  1 lp__      -1366.    -1365.    1.43   1.22   -1369.    -1.36e+3  1.00    1531. #>  2 lxi[1]       -1.24     -1.19  0.545  0.528     -2.23  -4.60e-1  1.00     899. #>  3 phi[1]        0.716     0.713 0.0573 0.0580     0.629  8.16e-1  1.00    2082. #>  4 beta_r[1]     3.90      3.90  0.0759 0.0758     3.78   4.02e+0  1.00    2206. #>  5 beta_t[1]     0.611     0.521 0.626  0.637     -0.261  1.81e+0  1.00     919. #>  6 xi[1]        -0.329    -0.305 0.160  0.160     -0.631 -1.08e-1  1.00     899. #>  7 rho[1]        0.339     0.339 0.0252 0.0238     0.298  3.81e-1  1.00    3980. #>  8 rho[2]        0.339     0.339 0.0252 0.0238     0.298  3.81e-1  1.00    3980. #>  9 rho[3]        0.339     0.339 0.0252 0.0238     0.298  3.81e-1  1.00    3980. #> 10 rho[4]        0.339     0.339 0.0252 0.0238     0.298  3.81e-1  1.00    3980. #> # ℹ 1,396 more rows #> # ℹ 1 more variable: ess_tail <dbl>"},{"path":"https://pinskylab.github.io/drmr/reference/fitted_pars_drm.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve parameters needed for forecasting — fitted_pars_drm","title":"Retrieve parameters needed for forecasting — fitted_pars_drm","text":"function identifies parameters necessary carrying forecasts based data used fit DRM (SDM).","code":""},{"path":"https://pinskylab.github.io/drmr/reference/fitted_pars_drm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve parameters needed for forecasting — fitted_pars_drm","text":"","code":"fitted_pars_drm(data_list)"},{"path":"https://pinskylab.github.io/drmr/reference/fitted_pars_drm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve parameters needed for forecasting — fitted_pars_drm","text":"data_list list used input model fitting. Typically, output make_data function.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/fitted_pars_drm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve parameters needed for forecasting — fitted_pars_drm","text":"character vector labels indicating parameters necessary forecast.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/fitted_pars_drm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve parameters needed for forecasting — fitted_pars_drm","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/fitted_pars_lambda.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve parameters needed for forecasting — fitted_pars_lambda","title":"Retrieve parameters needed for forecasting — fitted_pars_lambda","text":"function identifies parameters necessary carrying forecasts based data used fit DRM (SDM).","code":""},{"path":"https://pinskylab.github.io/drmr/reference/fitted_pars_lambda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve parameters needed for forecasting — fitted_pars_lambda","text":"","code":"fitted_pars_lambda(data_list)"},{"path":"https://pinskylab.github.io/drmr/reference/fitted_pars_lambda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve parameters needed for forecasting — fitted_pars_lambda","text":"data_list list used input model fitting. Typically, output make_data function.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/fitted_pars_lambda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve parameters needed for forecasting — fitted_pars_lambda","text":"character vector labels indicating parameters necessary forecast.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/fitted_pars_lambda.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve parameters needed for forecasting — fitted_pars_lambda","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/fitted_pars_sdm.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve parameters needed for forecasting — fitted_pars_sdm","title":"Retrieve parameters needed for forecasting — fitted_pars_sdm","text":"function identifies parameters necessary carrying forecasts based data used fit DRM (SDM).","code":""},{"path":"https://pinskylab.github.io/drmr/reference/fitted_pars_sdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve parameters needed for forecasting — fitted_pars_sdm","text":"","code":"fitted_pars_sdm(data_list)"},{"path":"https://pinskylab.github.io/drmr/reference/fitted_pars_sdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve parameters needed for forecasting — fitted_pars_sdm","text":"data_list list used input model fitting. Typically, output make_data function.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/fitted_pars_sdm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve parameters needed for forecasting — fitted_pars_sdm","text":"character vector labels indicating parameters necessary forecast.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/fitted_pars_sdm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve parameters needed for forecasting — fitted_pars_sdm","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/fix_linbeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Regression coefficient for non-centered variable — fix_linbeta","title":"Regression coefficient for non-centered variable — fix_linbeta","text":"Consider linear predictor linear square terms associated variable \\(x\\). Assume variable centered included linear predictor. functions recovers regression coefficient associated linear term variable centered.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/fix_linbeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regression coefficient for non-centered variable — fix_linbeta","text":"","code":"fix_linbeta(beta1, beta2, offset)"},{"path":"https://pinskylab.github.io/drmr/reference/fix_linbeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regression coefficient for non-centered variable — fix_linbeta","text":"beta1 numeric regression coefficient associated linear term. beta2 numeric regression coefficient associated quadratic term. offset numeric representing \"center\" \\(x\\).","code":""},{"path":"https://pinskylab.github.io/drmr/reference/fix_linbeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regression coefficient for non-centered variable — fix_linbeta","text":"numeric representing regression coefficient linear term model \\(x\\) centered.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/fix_linbeta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Regression coefficient for non-centered variable — fix_linbeta","text":"Lucas Godoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/fix_re.html","id":null,"dir":"Reference","previous_headings":"","what":"Random effects verbose to code — fix_re","title":"Random effects verbose to code — fix_re","text":"Random effects verbose code","code":""},{"path":"https://pinskylab.github.io/drmr/reference/fix_re.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random effects verbose to code — fix_re","text":"","code":"fix_re(x)"},{"path":"https://pinskylab.github.io/drmr/reference/fix_re.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random effects verbose to code — fix_re","text":"x character","code":""},{"path":"https://pinskylab.github.io/drmr/reference/fix_re.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random effects verbose to code — fix_re","text":"integer","code":""},{"path":"https://pinskylab.github.io/drmr/reference/fix_re.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Random effects verbose to code — fix_re","text":"lcgogoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/gen_adj.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates an adjacency matrix — gen_adj","title":"Generates an adjacency matrix — gen_adj","text":"Generates adjacency matrix \"movement\"","code":""},{"path":"https://pinskylab.github.io/drmr/reference/gen_adj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates an adjacency matrix — gen_adj","text":"","code":"gen_adj(x)"},{"path":"https://pinskylab.github.io/drmr/reference/gen_adj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates an adjacency matrix — gen_adj","text":"x sf object representing patches.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/gen_adj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates an adjacency matrix — gen_adj","text":"adjacency matrix","code":""},{"path":"https://pinskylab.github.io/drmr/reference/gen_adj.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generates an adjacency matrix — gen_adj","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/get_fitted_pars.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve parameters needed for forecasting — get_fitted_pars","title":"Retrieve parameters needed for forecasting — get_fitted_pars","text":"function identifies parameters necessary carrying forecasts based data used fit DRM (SDM).","code":""},{"path":"https://pinskylab.github.io/drmr/reference/get_fitted_pars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve parameters needed for forecasting — get_fitted_pars","text":"","code":"get_fitted_pars(data_list, model = \"drm\")"},{"path":"https://pinskylab.github.io/drmr/reference/get_fitted_pars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve parameters needed for forecasting — get_fitted_pars","text":"data_list list used input model fitting. Typically, output make_data function. model character indicating model forecasts sought . input admits two possible entries: \"drm\" (default) \"sdm\".","code":""},{"path":"https://pinskylab.github.io/drmr/reference/get_fitted_pars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve parameters needed for forecasting — get_fitted_pars","text":"character vector labels indicating parameters necessary forecast.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/get_fitted_pars.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve parameters needed for forecasting — get_fitted_pars","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/get_nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get nodes for ICAR spatial random effects — get_nodes","title":"Get nodes for ICAR spatial random effects — get_nodes","text":"Get nodes ICAR spatial random effects","code":""},{"path":"https://pinskylab.github.io/drmr/reference/get_nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get nodes for ICAR spatial random effects — get_nodes","text":"","code":"get_nodes(adj)"},{"path":"https://pinskylab.github.io/drmr/reference/get_nodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get nodes for ICAR spatial random effects — get_nodes","text":"adj adjacency matrix","code":""},{"path":"https://pinskylab.github.io/drmr/reference/get_nodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get nodes for ICAR spatial random effects — get_nodes","text":"list.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/get_nodes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get nodes for ICAR spatial random effects — get_nodes","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/get_phi_hat.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate phi — get_phi_hat","title":"Estimate phi — get_phi_hat","text":"Estimate phi","code":""},{"path":"https://pinskylab.github.io/drmr/reference/get_phi_hat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate phi — get_phi_hat","text":"","code":"get_phi_hat(y, family)"},{"path":"https://pinskylab.github.io/drmr/reference/get_phi_hat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate phi — get_phi_hat","text":"y numeric vector species' densities. family character specifying family probability distribution assumed density. options : \"gamma\" (default): gamma parametrized terms mean; \"lognormal\": log-normal parametrized terms mean; \"loglogistic\": log-logistic parametrized terms mean. \"lognormal_legacy\" (default): log-normal usual parametrization;","code":""},{"path":"https://pinskylab.github.io/drmr/reference/get_phi_hat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate phi — get_phi_hat","text":"numeric scalar representing estimate phi","code":""},{"path":"https://pinskylab.github.io/drmr/reference/get_phi_hat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate phi — get_phi_hat","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/get_scaling.html","id":null,"dir":"Reference","previous_headings":"","what":"Scaling factor for ICAR — get_scaling","title":"Scaling factor for ICAR — get_scaling","text":"Using results Rue Held 2005 Morris et al. 2019.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/get_scaling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scaling factor for ICAR — get_scaling","text":"","code":"get_scaling(adj)"},{"path":"https://pinskylab.github.io/drmr/reference/get_scaling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scaling factor for ICAR — get_scaling","text":"adj adjacency matrix","code":""},{"path":"https://pinskylab.github.io/drmr/reference/get_scaling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scaling factor for ICAR — get_scaling","text":"scalar","code":""},{"path":"https://pinskylab.github.io/drmr/reference/get_scaling.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Scaling factor for ICAR — get_scaling","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/ginv.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized Inverse — ginv","title":"Generalized Inverse — ginv","text":"Generalized Inverse","code":""},{"path":"https://pinskylab.github.io/drmr/reference/ginv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized Inverse — ginv","text":"","code":"ginv(X, tol = sqrt(.Machine$double.eps))"},{"path":"https://pinskylab.github.io/drmr/reference/ginv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized Inverse — ginv","text":"X matrix wish invert. tol relative tolerance detect zero singular values.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/ginv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized Inverse — ginv","text":"generalized inverse X","code":""},{"path":"https://pinskylab.github.io/drmr/reference/ginv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generalized Inverse — ginv","text":"function taken package MASS","code":""},{"path":"https://pinskylab.github.io/drmr/reference/int_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the interval score — int_score","title":"Calculate the interval score — int_score","text":"function calculates interval score given set observations, lower upper bounds, alpha parameter.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/int_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the interval score — int_score","text":"","code":"int_score(y, l, u, alpha)"},{"path":"https://pinskylab.github.io/drmr/reference/int_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the interval score — int_score","text":"y numeric vector observations. l numeric vector lower bounds prediction intervals. u numeric vector upper bounds prediction intervals. alpha numeric value specifying penalty parameter interval width.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/int_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the interval score — int_score","text":"numeric vector interval scores.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/int_score.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the interval score — int_score","text":"interval score proper scoring rule measures accuracy interval predictions. takes account coverage width prediction interval. lower score indicates better prediction.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/lambda2df.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn an array of density per age, time, and patch/site into a data.frame — lambda2df","title":"Turn an array of density per age, time, and patch/site into a data.frame — lambda2df","text":"Turn array density per age, time, patch/site data.frame","code":""},{"path":"https://pinskylab.github.io/drmr/reference/lambda2df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn an array of density per age, time, and patch/site into a data.frame — lambda2df","text":"","code":"lambda2df(lbd)"},{"path":"https://pinskylab.github.io/drmr/reference/lambda2df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn an array of density per age, time, and patch/site into a data.frame — lambda2df","text":"lbd 3-dimensional array","code":""},{"path":"https://pinskylab.github.io/drmr/reference/lambda2df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn an array of density per age, time, and patch/site into a data.frame — lambda2df","text":"return data.frame.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/lambda2df.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Turn an array of density per age, time, and patch/site into a data.frame — lambda2df","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/lambda_drm.html","id":null,"dir":"Reference","previous_headings":"","what":"Age-specific densities based on DRM. — lambda_drm","title":"Age-specific densities based on DRM. — lambda_drm","text":"Considering new dataset (across patches), computes forecasts based DRM passed drm.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/lambda_drm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Age-specific densities based on DRM. — lambda_drm","text":"","code":"lambda_drm(drm, cores = 1)"},{"path":"https://pinskylab.github.io/drmr/reference/lambda_drm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Age-specific densities based on DRM. — lambda_drm","text":"drm list object containing output fit_drm function. cores number threads used forecast. four chains used drm, four (less) threads recommended.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/lambda_drm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Age-specific densities based on DRM. — lambda_drm","text":"object class \"CmdStanGQ\" containing samples posterior predictive distribution forecasting.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/lambda_drm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Age-specific densities based on DRM. — lambda_drm","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/make_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Make data for DRM stan models — make_data","title":"Make data for DRM stan models — make_data","text":"function creates list used input stan model.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/make_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make data for DRM stan models — make_data","text":"","code":"make_data(   y,   time,   site,   init_data = numeric(0),   f_mort,   m = -log(0.7),   x_t,   x_m,   x_r,   n_ages = 2,   age_selectivity,   ages_movement,   adj_mat = matrix(0, ncol = 1, nrow = 1),   .toggles,   .priors,   family = \"gamma\",   reorder = TRUE,   phi_hat = FALSE )"},{"path":"https://pinskylab.github.io/drmr/reference/make_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make data for DRM stan models — make_data","text":"y numeric vector species' densities. time vector indicating time point associated element y. site vector indicating sites associated element y. init_data optional vector (lengh n_ages - 1) initialize population dynamics. f_mort optional matrix informing instantaneous fishing mortality rates age (columns) timepoint (rows). m numeric value corresponding instantaneous natural mortality rate. default value -log(.7), implies survival rate 0.70 age classes. x_t design matrix variables associated probability absence site/time. x_m design matrix variables associated survival. x_r design matrix variables associated recruitment. n_ages integer indicating number ages underlying population dynamic model. age_selectivity numeric vector n_ages elements, element indicates selectivity respective age. elements vector must lie 0 1. ages_movement integer numeric vector specifying ages individuals focal species assumed move. ages_movement integer, individuals younger age considered static (non-moving). ages_movement numeric vector length n_ages, indicates movement capability age group. value 0 indicates corresponding age group static, 1 indicates movement allowed. example, c(0, 0, 1, 1, 0) specifies age groups 1, 2, 5 static, 3 4 mobile. adj_mat adjacency matrix dimensions sites \\(\\times\\) sites. elements 1 two sites neighbors zero otherwise. .toggles list toggles model components. components : rho_mu: 1 use explicitly relates rho mu 0 otherwise. cloglog: 1 use complementary log-log 0 logit link function absence probabilities. movement: 1 allow (adjacent) moviment; 0 static. est_surv: 1 estimate mortality 0 otherwise. est_init: 1 estimate initial values lambda 0 otherwise. minit: 1 use mortality estimate initial age classes 0 otherwise. ar_re: character. assumes one following values: \"none\" - AR, \"rec\" AR(1) recruitment, \"surv\" - AR(1) survival (works est_surv ), \"dens\" - AR(1) density. iid_re: character. assumes one following values: \"none\" - iid re, \"rec\" iid re recruitment, \"surv\" - iir re survival (works est_surv ), \"dens\" - iid_re density. sp_re: character. assumes one following values: \"none\" - ICAR re, \"rec\" ICAR re recruitment, \"surv\" - ICAR re survival (works est_surv ), \"dens\" - ICAR_re density. .priors list priors hyperparameters. family character specifying family probability distribution assumed density. options : \"gamma\" (default): gamma parametrized terms mean; \"lognormal\": log-normal parametrized terms mean; \"loglogistic\": log-logistic parametrized terms mean. \"lognormal_legacy\" (default): log-normal usual parametrization; reorder boolean telling whether data needs reordered. default TRUE means data points ordered site time, respectively. phi_hat boolean indicating whether prior phi determined data.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/make_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make data for DRM stan models — make_data","text":"list used input stan model","code":""},{"path":"https://pinskylab.github.io/drmr/reference/make_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make data for DRM stan models — make_data","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/make_data_sdm.html","id":null,"dir":"Reference","previous_headings":"","what":"Make data for SDM stan models — make_data_sdm","title":"Make data for SDM stan models — make_data_sdm","text":"function creates list used input stan model.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/make_data_sdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make data for SDM stan models — make_data_sdm","text":"","code":"make_data_sdm(   y,   time,   site,   z,   x,   .toggles,   .priors,   family = \"gamma\",   reorder = TRUE,   phi_hat = FALSE )"},{"path":"https://pinskylab.github.io/drmr/reference/make_data_sdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make data for SDM stan models — make_data_sdm","text":"y numeric vector species' densities. time vector indicating time point associated element y. site vector indicating sites associated element y. z design matrix variables associated probability absence site/time. x design matrix variables associated non-zero densities. .toggles list toggles model components. components : cloglog: 1 use complementary log-log 0 logit link function absence probabilities. movement: 1 allow (adjacent) moviment; 0 static. est_surv: 1 estimate survival rates 0 otherwise. ar_re: \"rec\" incorporate AR(1) process density. accepted option \"none\" .priors list priors hyperparameters. family character specifying family probability distribution assumed density. options : \"gamma\" (default): gamma parametrized terms mean; \"lognormal\": log-normal parametrized terms mean; \"loglogistic\": log-logistic parametrized terms mean. \"lognormal_legacy\" (default): log-normal usual parametrization; reorder boolean telling whether data needs reordered. default TRUE means data points ordered site time, respectively. phi_hat boolean indicating whether prior phi determined data.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/make_data_sdm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make data for SDM stan models — make_data_sdm","text":"list used input stan model","code":""},{"path":"https://pinskylab.github.io/drmr/reference/make_data_sdm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make data for SDM stan models — make_data_sdm","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/make_surv.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the ","title":"Generate the ","text":"Generate \"survival\" terms","code":""},{"path":"https://pinskylab.github.io/drmr/reference/make_surv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the ","text":"","code":"make_surv(n_patches, n_time, x_sv, pars)"},{"path":"https://pinskylab.github.io/drmr/reference/make_surv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the ","text":"n_patches number patches n_time number timepoints x_sv matrix environmental factors affecting survival pars named list parameters used simulate log-recruitment. must contain vector named \"beta_s\" length equal number columnts x_sv.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/make_surv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the ","text":"matrix n_patches columns n_time rows representing log-survival patch/site time.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/make_surv.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate the ","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/marg.html","id":null,"dir":"Reference","previous_headings":"","what":"Relationships with covariates — marg","title":"Relationships with covariates — marg","text":"Relationships covariates","code":""},{"path":"https://pinskylab.github.io/drmr/reference/marg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relationships with covariates — marg","text":"","code":"marg_rec(drm, newdata)  marg_pabs(drm, newdata)  marg_surv(drm, newdata)"},{"path":"https://pinskylab.github.io/drmr/reference/marg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relationships with covariates — marg","text":"drm output fit_drm() call. newdata data.frame values environmental variables wish estimate recruitment, survival, absence probabilities.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/marg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relationships with covariates — marg","text":"data.frame samples recruitment (survival, absence probabilities) posterior distribution.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/marg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Relationships with covariates — marg","text":"marg_rec function works obtain relationships regarding recruitment, marg_surv marg_abs evaluate relationships survival absence probability, respectively.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/marg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Relationships with covariates — marg","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/max_quad_x.html","id":null,"dir":"Reference","previous_headings":"","what":"Value of a covariate that maximizes the response variable in a quadratic model. — max_quad_x","title":"Value of a covariate that maximizes the response variable in a quadratic model. — max_quad_x","text":"Consider linear predictor linear square terms associated variable \\(x\\). Assume variable centered included linear predictor. functions returns value \\(x\\) (original scale) linear predictor maximized (minimized).","code":""},{"path":"https://pinskylab.github.io/drmr/reference/max_quad_x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Value of a covariate that maximizes the response variable in a quadratic model. — max_quad_x","text":"","code":"max_quad_x(beta1, beta2, offset = 0)"},{"path":"https://pinskylab.github.io/drmr/reference/max_quad_x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Value of a covariate that maximizes the response variable in a quadratic model. — max_quad_x","text":"beta1 numeric regression coefficient associated linear term. beta2 numeric regression coefficient associated quadratic term. offset numeric representing \"center\" \\(x\\).","code":""},{"path":"https://pinskylab.github.io/drmr/reference/max_quad_x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Value of a covariate that maximizes the response variable in a quadratic model. — max_quad_x","text":"numeric representing uncentered \\(x\\) maximizes (minimizes) linear predictor.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/max_quad_x.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Value of a covariate that maximizes the response variable in a quadratic model. — max_quad_x","text":"Lucas Godoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/model_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a random sample from a model's predictive distribution given a set of parameters — model_sim","title":"Generate a random sample from a model's predictive distribution given a set of parameters — model_sim","text":"Generates samples predictive distribution model given set parameters. primarily used prior predictive checks simulation studies.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/model_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a random sample from a model's predictive distribution given a set of parameters — model_sim","text":"","code":"model_sim(dat, model, selectivity, pars, ...)"},{"path":"https://pinskylab.github.io/drmr/reference/model_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a random sample from a model's predictive distribution given a set of parameters — model_sim","text":"dat list containing data prior parameters, typically generated make_data() make_data_sdm(). model character string specifying model type. Must either \"drm\" \"sdm\". Defaults \"drm\". selectivity numeric vector length number age-groups. pars named list model parameters. ... parameters passed pop_dyn.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/model_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a random sample from a model's predictive distribution given a set of parameters — model_sim","text":"list containing samples drawn prior distributions model parameters.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/model_sim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a random sample from a model's predictive distribution given a set of parameters — model_sim","text":"See link rlang::.data import.","code":""},{"path":[]},{"path":"https://pinskylab.github.io/drmr/reference/model_sim.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate a random sample from a model's predictive distribution given a set of parameters — model_sim","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/pars_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform parameters to a meaningful and interpretable scale. — pars_transform","title":"Transform parameters to a meaningful and interpretable scale. — pars_transform","text":"Transform parameters meaningful interpretable scale.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/pars_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform parameters to a meaningful and interpretable scale. — pars_transform","text":"","code":"pars_transform(pars)"},{"path":"https://pinskylab.github.io/drmr/reference/pars_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform parameters to a meaningful and interpretable scale. — pars_transform","text":"pars list parameters","code":""},{"path":"https://pinskylab.github.io/drmr/reference/pars_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform parameters to a meaningful and interpretable scale. — pars_transform","text":"list parameters","code":""},{"path":"https://pinskylab.github.io/drmr/reference/pars_transform.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Transform parameters to a meaningful and interpretable scale. — pars_transform","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/pop_dyn.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate population dynamics — pop_dyn","title":"Simulate population dynamics — pop_dyn","text":"Given set parameters, simulate population dynamics.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/pop_dyn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate population dynamics — pop_dyn","text":"","code":"pop_dyn(   n_patches,   n_time,   n_ages,   x_rec,   ar_time,   f_a_t,   x_sv = NULL,   m = 0.25,   pars,   init,   init_type,   movement = FALSE,   adj_mat = NULL,   mov_age = NULL )"},{"path":"https://pinskylab.github.io/drmr/reference/pop_dyn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate population dynamics — pop_dyn","text":"n_patches number patches n_time number timepoints n_ages integer indicating number (assumed) age-classes. x_rec matrix environmental factors affecting recruitment ar_time boolean indicating whether AR(1) term included log-recruitment. f_a_t fishing mortality x_sv matrix environmental factors affecting survival m numeric value indicating natural mortality instantaneous rate. pars named list model parameters. init initialization vector length n_ages - 1 init_type type initialization (integer 0 5) movement boolean indicating whether movement applied . TRUE, pars must element called zeta indicating probability staying given patch two timepoints. adj_mat n_patches n_patches row-standardized adjacency matrix. mov_age vector ages movement starts.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/pop_dyn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate population dynamics — pop_dyn","text":"array expected densities per age-group, patch, timepoint.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/pop_dyn.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate population dynamics — pop_dyn","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/pp_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate samples from the prior predictive distribution of model parameters — pp_sim","title":"Generate samples from the prior predictive distribution of model parameters — pp_sim","text":"Generates samples prior distributions model parameters. primarily used prior predictive checks generate initial values MCMC.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/pp_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate samples from the prior predictive distribution of model parameters — pp_sim","text":"","code":"pp_sim(dat, model = \"drm\", selectivity = NULL, ...)"},{"path":"https://pinskylab.github.io/drmr/reference/pp_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate samples from the prior predictive distribution of model parameters — pp_sim","text":"dat list containing data prior parameters, typically generated make_data() make_data_sdm(). model character string specifying model type. Must either \"drm\" \"sdm\". Defaults \"drm\". selectivity numeric vector length number age-groups. ... parameters passed pop_dyn.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/pp_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate samples from the prior predictive distribution of model parameters — pp_sim","text":"list containing samples drawn prior distributions model parameters.","code":""},{"path":[]},{"path":"https://pinskylab.github.io/drmr/reference/pp_sim.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate samples from the prior predictive distribution of model parameters — pp_sim","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/predict_drm.html","id":null,"dir":"Reference","previous_headings":"","what":"Forecasts based on DRM. — predict_drm","title":"Forecasts based on DRM. — predict_drm","text":"Considering new dataset (across patches), computes forecasts based DRM passed drm.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/predict_drm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forecasts based on DRM. — predict_drm","text":"","code":"predict_drm(drm, new_data, past_data, f_test, seed = 1, cores = 1)"},{"path":"https://pinskylab.github.io/drmr/reference/predict_drm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forecasts based on DRM. — predict_drm","text":"drm list object containing output fit_drm function. new_data data.frame dataset wish obtain predictions. past_data data.frame dataset last year used model fitting. needed f_test missing estimating survival. f_test matrix informing instantaneous fishing mortality rates age (columns) timepoint (rows). seed seed used forecasts. Forecasts obtained Monte Carlo samples posterior predictive distribution. Therefore, seed needed ensure results' reproducibility. cores number threads used forecast. four chains used drm, four (less) threads recommended.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/predict_drm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forecasts based on DRM. — predict_drm","text":"object class \"CmdStanGQ\" containing samples posterior predictive distribution forecasting.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/predict_drm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Forecasts based on DRM. — predict_drm","text":"current version code assumes data forecasts needed ordered \"patch\" \"site\" , addition, patches MUST ones used obtain parameters' estimates drm object.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/predict_drm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Forecasts based on DRM. — predict_drm","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/predict_sdm.html","id":null,"dir":"Reference","previous_headings":"","what":"Forecasts based on SDM. — predict_sdm","title":"Forecasts based on SDM. — predict_sdm","text":"Considering new dataset (across patches), computes forecasts based SDM passed sdm. Consider linear predictor linear square terms associated variable \\(x\\). Assume variable centered included linear predictor. functions returns value \\(x\\) (original scale) linear predictor maximized (minimized).","code":""},{"path":"https://pinskylab.github.io/drmr/reference/predict_sdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forecasts based on SDM. — predict_sdm","text":"","code":"predict_sdm(sdm, new_data, seed = 1, cores = 1)"},{"path":"https://pinskylab.github.io/drmr/reference/predict_sdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forecasts based on SDM. — predict_sdm","text":"sdm list object containing output fit_sdm call. new_data data.frame dataset wish obtain predictions. seed seed used forecasts. Forecasts obtained Monte Carlo samples posterior predictive distribution. Therefore, seed needed ensure results' reproducibility. cores number threads used forecast. four chains used drm, four (less) threads recommended.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/predict_sdm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forecasts based on SDM. — predict_sdm","text":"object class \"CmdStanGQ\" containing samples posterior predictive distribution forecasting.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/predict_sdm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Forecasts based on SDM. — predict_sdm","text":"current version code assumes data forecasts needed ordered \"patch\" \"site\" , addition, patches MUST ones used obtain parameters' estimates sdm object.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/predict_sdm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Forecasts based on SDM. — predict_sdm","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/prior_inits.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate initial values for MCMC from the prior — prior_inits","title":"Generate initial values for MCMC from the prior — prior_inits","text":"Generates initial values Markov Chain Monte Carlo (MCMC) sampling prior distributions model parameters. helps starting MCMC chains different points parameter space.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/prior_inits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate initial values for MCMC from the prior — prior_inits","text":"","code":"prior_inits(dat, chains, model = \"drm\")"},{"path":"https://pinskylab.github.io/drmr/reference/prior_inits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate initial values for MCMC from the prior — prior_inits","text":"dat list containing data prior parameters, typically generated make_data() make_data_sdm(). chains integer specifying number MCMC chains initialize. Defaults 4. model character string specifying model type. Must either \"drm\" \"sdm\". Defaults \"drm\".","code":""},{"path":"https://pinskylab.github.io/drmr/reference/prior_inits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate initial values for MCMC from the prior — prior_inits","text":"list lists, inner list contains initial values one MCMC chain. structure inner list output prior_sample().","code":""},{"path":[]},{"path":"https://pinskylab.github.io/drmr/reference/prior_inits.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate initial values for MCMC from the prior — prior_inits","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/prior_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate samples from the prior distribution of model parameters — prior_sample","title":"Generate samples from the prior distribution of model parameters — prior_sample","text":"Generates samples prior distributions model parameters. primarily used prior predictive checks generate initial values MCMC.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/prior_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate samples from the prior distribution of model parameters — prior_sample","text":"","code":"prior_sample(dat, model = \"drm\")"},{"path":"https://pinskylab.github.io/drmr/reference/prior_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate samples from the prior distribution of model parameters — prior_sample","text":"dat list containing data prior parameters, typically generated make_data() make_data_sdm(). model character string specifying model type. Must either \"drm\" \"sdm\". Defaults \"drm\".","code":""},{"path":"https://pinskylab.github.io/drmr/reference/prior_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate samples from the prior distribution of model parameters — prior_sample","text":"list containing samples drawn prior distributions model parameters.","code":""},{"path":[]},{"path":"https://pinskylab.github.io/drmr/reference/prior_sample.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate samples from the prior distribution of model parameters — prior_sample","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/rtn.html","id":null,"dir":"Reference","previous_headings":"","what":"Random number generation from a truncated Normal distribution — rtn","title":"Random number generation from a truncated Normal distribution — rtn","text":"Generates random numbers truncated Normal distribution.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/rtn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random number generation from a truncated Normal distribution — rtn","text":"","code":"rtn(n, mean = 0, sd = 1, range = c(0, Inf))"},{"path":"https://pinskylab.github.io/drmr/reference/rtn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random number generation from a truncated Normal distribution — rtn","text":"n integer specifying number random samples generate. mean numeric scalar representing mean underlying normal distribution. Defaults 0. sd numeric scalar representing standard deviation underlying normal distribution. Defaults 1. range numeric vector length 2 specifying lower upper truncation bounds. Defaults c(0, Inf), indicating truncation 0.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/rtn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random number generation from a truncated Normal distribution — rtn","text":"numeric vector length n containing random numbers drawn specified truncated normal distribution.","code":""},{"path":[]},{"path":"https://pinskylab.github.io/drmr/reference/rtn.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Random number generation from a truncated Normal distribution — rtn","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/rtt.html","id":null,"dir":"Reference","previous_headings":"","what":"Random number generation from a truncated Student's t distribution — rtt","title":"Random number generation from a truncated Student's t distribution — rtt","text":"Generates random numbers truncated Student's t distribution.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/rtt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random number generation from a truncated Student's t distribution — rtt","text":"","code":"rtt(n, mu = 0, sd = 1, df = 3, range = c(0, Inf))"},{"path":"https://pinskylab.github.io/drmr/reference/rtt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random number generation from a truncated Student's t distribution — rtt","text":"n integer specifying number random numbers generate. mu numeric scalar representing mean underlying t distribution. Defaults 0. sd numeric scalar representing standard deviation underlying t distribution. Defaults 1. df numeric scalar representing degrees freedom underlying t distribution. Defaults 3. range numeric vector length 2 specifying lower upper truncation bounds. Defaults c(0, Inf), indicating truncation 0.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/rtt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random number generation from a truncated Student's t distribution — rtt","text":"numeric vector length n containing random numbers drawn specified truncated t distribution.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/rtt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random number generation from a truncated Student's t distribution — rtt","text":"details method used, see: https://stats.stackexchange.com/questions/567944/-can--sample---shifted--scaled-student-t-distribution---specifi","code":""},{"path":[]},{"path":"https://pinskylab.github.io/drmr/reference/rtt.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Random number generation from a truncated Student's t distribution — rtt","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/safe_modify.html","id":null,"dir":"Reference","previous_headings":"","what":"Modifying a named list — safe_modify","title":"Modifying a named list — safe_modify","text":"Safely modifies named list.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/safe_modify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modifying a named list — safe_modify","text":"","code":"safe_modify(original, replacements)"},{"path":"https://pinskylab.github.io/drmr/reference/safe_modify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modifying a named list — safe_modify","text":"original named list \"original\" parameters. replacements named list containing elements modified original list","code":""},{"path":"https://pinskylab.github.io/drmr/reference/safe_modify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modifying a named list — safe_modify","text":"updated original list.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/safe_modify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Modifying a named list — safe_modify","text":"function returns error names found replacements object list modified.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/safe_modify.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Modifying a named list — safe_modify","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/sim_ar.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate AR(1) — sim_ar","title":"Simulate AR(1) — sim_ar","text":"Simulate AR(1)","code":""},{"path":"https://pinskylab.github.io/drmr/reference/sim_ar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate AR(1) — sim_ar","text":"","code":"sim_ar(pars, n_time)"},{"path":"https://pinskylab.github.io/drmr/reference/sim_ar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate AR(1) — sim_ar","text":"pars named list two elements: alpha (representing temporal autocorrelation parameter) tau representing conditional standard deviation AR(1) process. n_time number time points","code":""},{"path":"https://pinskylab.github.io/drmr/reference/sim_ar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate AR(1) — sim_ar","text":"vector length n_time representing realization zero-mean AR(1) process.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/sim_ar.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate AR(1) — sim_ar","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/sim_dens.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate response variable — sim_dens","title":"Simulate response variable — sim_dens","text":"Given expected value x list parameters (pars), function simulates one realization probability density function also specified list pars.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/sim_dens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate response variable — sim_dens","text":"","code":"sim_dens(x, pars)"},{"path":"https://pinskylab.github.io/drmr/reference/sim_dens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate response variable — sim_dens","text":"x expected value simulated value. pars list parameters.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/sim_dens.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate response variable — sim_dens","text":"numeric value representing realization probability distribution mean x parameters pars.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/sim_dens.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate response variable — sim_dens","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/sim_log_rec.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate log-recruitment — sim_log_rec","title":"Simulate log-recruitment — sim_log_rec","text":"Simulate log-recruitment","code":""},{"path":"https://pinskylab.github.io/drmr/reference/sim_log_rec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate log-recruitment — sim_log_rec","text":"","code":"sim_log_rec(n_patches, n_time, x_rec, pars, ar_time = TRUE)"},{"path":"https://pinskylab.github.io/drmr/reference/sim_log_rec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate log-recruitment — sim_log_rec","text":"n_patches number patches n_time number timepoints x_rec matrix environmental factors affecting recruitment pars named list parameters used simulate log-recruitment. must contain vector named \"beta_r\" length equal number columnts x_rec. addition, ar_time = TRUE, list must also contain named vector called \"ar\". named vector must contain element called alpha (autocorrelation parameter) another called tau (conditional SD). ar_time boolean indicating whether AR(1) term included log-recruitment.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/sim_log_rec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate log-recruitment — sim_log_rec","text":"matrix n_patches columns n_time rows representing log-recruitment patch/site time.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/sim_log_rec.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate log-recruitment — sim_log_rec","text":"lcgodoy","code":""},{"path":"https://pinskylab.github.io/drmr/reference/sum_fl.html","id":null,"dir":"Reference","previous_headings":"","what":"Summer Flounder — sum_fl","title":"Summer Flounder — sum_fl","text":"dataset containing containing number fish caught different sites timepoints.","code":""},{"path":"https://pinskylab.github.io/drmr/reference/sum_fl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summer Flounder — sum_fl","text":"","code":"sum_fl"},{"path":"https://pinskylab.github.io/drmr/reference/sum_fl.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Summer Flounder — sum_fl","text":"data.frame 350 rows 13 columns: patch Patch code lat_floor Lowest latitute associated current patch year Year y Number fish caught n_hauls Number hauls used catch fish stemp Sea surface temperature ssalin Sea surface salinity btemp Sea bottom temperature bsalin Sea bottom salinity lat Avg. latitude lon Avg. longitude depth Avg. depth area_km2 Area km^2^","code":""},{"path":"https://pinskylab.github.io/drmr/reference/sum_fl.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Summer Flounder — sum_fl","text":"https://www.fisheries.noaa.gov/feature-story/2022-fall-bottom-trawl-survey-completed-northeast","code":""},{"path":"https://pinskylab.github.io/drmr/reference/sum_fl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summer Flounder — sum_fl","text":"DETAILS DATASET","code":""},{"path":"https://pinskylab.github.io/drmr/news/index.html","id":"drmr-021","dir":"Changelog","previous_headings":"","what":"drmr 0.2.1","title":"drmr 0.2.1","text":"new toggle called rho_mu introduced. default value 1 stands explicitly relating probability observing 0 (rho) latent density (mu). See Yee 2014 references therein. new vignette comprehensive list model parameters priors available. new vignette detailing initialization procedures also included.","code":""},{"path":"https://pinskylab.github.io/drmr/news/index.html","id":"drmr-020","dir":"Changelog","previous_headings":"","what":"drmr 0.2.0","title":"drmr 0.2.0","text":"init now admits real numbers . init_data: default now initialize age-classes patches ranging .9 .01. Allowing choosing process correlated time; variable raw became w_t; tau became sigma_t “none”, default indicating AR random effects. “rec” (AR recruitment) “surv” (AR survival) “dens” (AR density) Unstructured random effects. following variables added model: z_i patch specific random effect sigma_i SD iid random effect. “none” (default) indicating IID random effects. “rec” (IID recruitment) “surv” (IID survival) “dens” (iID density) ICAR random effects following variables added model: w_s, z_s patch specific random effect sigma_s approx marginal SD spatial random effect. Similarly two structures mentioned , flag sp_re admits following values: “none” (default), “rec” (recruitment), “surv” (survival), “dens” (density). Functions data simulation temporarily removed. Fixing init_data Fixing bugs regarding popdyn initialization.","code":""},{"path":"https://pinskylab.github.io/drmr/news/index.html","id":"drmr-013","dir":"Changelog","previous_headings":"","what":"drmr 0.1.3","title":"drmr 0.1.3","text":"Modified examples.qmd prevent errors due pathfinder failing. Updated github actions. problematic behaviour affecting make_data dealed prior initialization predictions. Options “data informed” phi priors floag phi_hat family = \"gamma\" prior phi provided, default prior parameter Gamma shape = 2 rate = ybar *   s2. prior theoretical mean method moments estimator phi. family = \"lognormal\" prior phi provided, default prior parameter Gamma theoretical mean MLE phi. fixed typo defining log-logistic reparametrization","code":""},{"path":"https://pinskylab.github.io/drmr/news/index.html","id":"drmr-0129","dir":"Changelog","previous_headings":"","what":"drmr 0.1.2.9","title":"drmr 0.1.2.9","text":"fixed weird behaviour make_data","code":""},{"path":"https://pinskylab.github.io/drmr/news/index.html","id":"drmr-012","dir":"Changelog","previous_headings":"","what":"drmr 0.1.2","title":"drmr 0.1.2","text":"lambda_drm function added recover age-specific densities form fit_drm call. fixed bug forecast.stan script.","code":""},{"path":"https://pinskylab.github.io/drmr/news/index.html","id":"drmr-011","dir":"Changelog","previous_headings":"","what":"drmr 0.1.1","title":"drmr 0.1.1","text":"Vignettes updated R CMD check “works”. lambdas longer returned fit predict functions. Returning values imply significant decrease computational performance, especially increasing sample size. AR term model “corrected”. bugs prior initialization sdm fixed.","code":""},{"path":"https://pinskylab.github.io/drmr/news/index.html","id":"drmr-010","dir":"Changelog","previous_headings":"","what":"drmr 0.1.0","title":"drmr 0.1.0","text":"Exporting fix_linbeta, max_quad_x, int_score functions Fixing check_between function (exported; functions just helper) Changed prior zeta allowing user input hyperparameters. , standard normal prior logit zeta. Now, place beta prior zeta. Included support different types population dynamics initialization Fixed pdf random number generation location-scale Student’s t distribution rlang became dependency. Included functions simulating data DRM model prior predictive checks. Trying avoid overflow making calculations log-scale whenever ’s possible. Constraining alpha (0,1)(0, 1). Prior phi now Gamma. fit_drm fit_sdm returns changed. Now, element draws called stanfit. addition, additional element returned list called formulas. formulas elements aims making predict_* functions less error prone. QR parametrization toggles completely removed. coef_* parameters converted beta_*. , coef_r now beta_r; coef_t now beta_t, . pr_logsd_r_* inputs converted pr_ltau_*. Functions plot effect covariates recruitment, survival, absence probability included. est_mort becomes est_surv (makes sense text). get-started examples vignette updated.","code":""},{"path":"https://pinskylab.github.io/drmr/news/index.html","id":"drmr-0024","dir":"Changelog","previous_headings":"","what":"drmr 0.0.24","title":"drmr 0.0.24","text":"Initial values population dynamics fixed. Vignettes quarto New function based data.table::. int_score function calculate interval score also included. interval score helps assess interval predictions. age_at_maturity replaced ages_movement. former can take either single integer indicating age individuals start move, vector 0s age-groups move 1s age-groups allowed move.","code":""},{"path":"https://pinskylab.github.io/drmr/news/index.html","id":"drmr-0023","dir":"Changelog","previous_headings":"","what":"drmr 0.0.23","title":"drmr 0.0.23","text":"prior α\\alpha modified. particular, instead pcp prior, now put Beta prior (α+1)/2(\\alpha + 1) / 2. hyperparameters Beta distribution pr_alpha_a pr_alpha_b, respectively. New functions initialize parameters prior introduced. Now init parmeter fit_sdm fit_drm functions can take three possible values: “default”: standard initialization Stan (details see Stan's   documentation). “prior”: initialize parameters using samples respective prior distributions; “pathfinder”: uses Pathfinder algorithm initialize parameters. Fixed issues documentation.","code":""},{"path":"https://pinskylab.github.io/drmr/news/index.html","id":"drmr-0022","dir":"Changelog","previous_headings":"","what":"drmr 0.0.22","title":"drmr 0.0.22","text":"fit_drm fit_sdm functions make model fitting slightly simpler. pr_phi_a pr_phi_b become pr_phi_mu pr_phi_sd. prior log(ϕ)\\log(\\phi) Student’s t 3 degrees freedom, mean pr_phi_mu SD pr_phi_sd. Selectivity make_data fixed, thanks Mark. , used users input .","code":""},{"path":"https://pinskylab.github.io/drmr/news/index.html","id":"drmr-0021","dir":"Changelog","previous_headings":"","what":"drmr 0.0.21","title":"drmr 0.0.21","text":"make_data_sdm function (analogous make_data) created SDM. predict_sdm function (analogous predict_drm) created SDM.","code":""},{"path":"https://pinskylab.github.io/drmr/news/index.html","id":"drmr-002","dir":"Changelog","previous_headings":"","what":"drmr 0.0.2","title":"drmr 0.0.2","text":"Parameters code documentation properly matched. p_error toggle becomes time_ar toggle (appropriate). predict_drm function created make_data function now family argument indicating probability distribution assumed response (given model parameters latent variables)","code":""},{"path":"https://pinskylab.github.io/drmr/news/index.html","id":"drmr-001","dir":"Changelog","previous_headings":"","what":"drmr 0.0.1","title":"drmr 0.0.1","text":"First version package containing pre-compiled code fitting DRM, making forecasts calculating density weighted centroids.","code":""}]

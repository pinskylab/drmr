---
title: "Get Started"
author: Lucas da Cunha Godoy
vignette: >
  %\VignetteIndexEntry{get-started}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
knitr:
  opts_chunk:
    collapse: true
    comment: '#>'
---

```{r}
#| label: setup
library(drmr)
library(sf) ## "mapping"
library(ggplot2) ## graphs
library(bayesplot) ## and more graphs
library(dplyr)
```

Now, we load the data.

```{r}
#| label: data
data(sum_fl)
```

## Data processing & splitting

To assess model predictions, the chunk below splits the data into train and
test.

```{r}
#| label: split
## 5 years-ahead predictions
first_year_forecast <- max(sum_fl$year) - 5

first_id_forecast <-
  first_year_forecast - min(sum_fl$year) + 1

years_all <- length(unique(sum_fl$year))
years_train <- years_all[years_all < first_id_forecast]
years_test <- years_all[years_all >= first_id_forecast]

## splitting data
dat_test <- sum_fl |>
  filter(year >= first_year_forecast)

dat_train <- sum_fl |>
  filter(year < first_year_forecast)
```

Finally, I transform our response variable into a density.

```{r}
#| label: ytransform
dat_train <- dat_train |>
  mutate(dens = y / area_km2,
         .before = y)

dat_test <- dat_test |>
  mutate(dens = y / area_km2,
         .before = y)
```

## Preparing data for model fit


This package uses `cmdstanr` to fit DRMs to the data. The data passed to
`cmdstanr` objects is stored in a `list` and we provide a function called
`make_data`. 


The `list` to fit the simplest model possible can be obtained as follows:

```{r}
#| label: make_data_simplest
data <-
  make_data(y = dat_train$dens,
            time = dat_train$year,
            site = dat_train$patch,
            n_ages = 8,
            m = 0.25) # fishing mortality
```

In general, the `make_data` function will control what model we are fitting
through "toggles" and different inputs (type `?make_data` for
documentation). For more information, see the toggles vignette
(`vignettes("toggles", package = "drmr")`).


## Fitting model

The code below loads the object used to fit the DRM models. We don't need to
reload this object if we update the data list using different options from the
`make_data` function.

```{r}
#| label: drm_load
drm_compiled <-
  instantiate::stan_package_model(name = "drm",
                                  package = "drmr")
```

To get MCMC samples from the posterior, run:

```{r}
#| label: drm_mcmc
mcmc_samples <-
  drm_compiled$sample(data = data,
                      seed = 2025, ## for reproducibility
                      chains = 4,
                      parallel_chains = 4)
```

Alternatively, we can achieve the same result without loading the compiled model
and creating a `data` list. This is achieved through the `fit_drm` function as
follows:

```{r}
#| label: fit_drm
#| eval: false
mcmc_samples <-
  fit_drm(.data = dat_train,
          y_col = "dens",
          time_col = "year",
          site_col = "patch"
          n_ages = 8,
          m = 0.25,
          seed = 2025)
```


## Sampler convergence

In general, the chains mix well and the posterior densities estimates are
similar for the four chains ran:
```{r}
#| label: traceplot
##| fig-alt: "MCMC diagnostic plots for the DRM, arranged in two columns and
##|   three rows. The left column displays trace plots for four parallel MCMC
##|   chains, assessing convergence. The right column displays the estimated
##|   posterior density plots for each parameter, assessing mixing. Row 1:
##|   sigma_obs parameter; Row 2: coef_t parameter; Row 3: coef_r parameter.
##|   All parameters show evidence of good chain convergence and mixing."

mcmc_samples$draws(variables = c("sigma_obs",
                                 "coef_t",
                                 "coef_r")) |>
  mcmc_combo(combo = c("trace", "dens_overlay"),
             facet_args = list(labeller = label_parsed))
```

